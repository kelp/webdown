{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webdown","text":"<p>{% include \"README.md\" %}</p>"},{"location":"#documentation","title":"Documentation","text":"<p>This documentation includes:</p> <ul> <li>API Reference - Detailed documentation for Python API</li> <li>Changelog - Version history and changes</li> <li>Contributing Guide - How to contribute to the project</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>{% include \"CHANGELOG.md\" %}</p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>{% include \"CONTRIBUTING.md\" %}</p>"},{"location":"api/","title":"API Reference","text":"<p>Webdown provides a simple API for converting web pages to Markdown. The main modules are:</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li>Converter - Core functionality for HTML to Markdown conversion</li> <li>CLI - Command-line interface for the package</li> </ul>"},{"location":"api/#quick-start","title":"Quick Start","text":"<pre><code>from webdown.converter import convert_url_to_markdown\n\n# Basic usage\nmarkdown = convert_url_to_markdown(\"https://example.com\")\n\n# With options\nmarkdown = convert_url_to_markdown(\n    url=\"https://example.com\",\n    include_toc=True,\n    compact_output=True,\n    body_width=80\n)\n\n# Save to file\nwith open(\"output.md\", \"w\") as f:\n    f.write(markdown)\n</code></pre> <p>For more details, see the Converter API documentation.</p>"},{"location":"api/cli/","title":"Command-Line Interface","text":"<p>This page documents the Command-Line Interface (CLI) for Webdown, which allows you to convert web pages to Markdown from the terminal.</p>"},{"location":"api/cli/#main-entry-point","title":"Main Entry Point","text":"<p>Execute the webdown command-line interface.</p> <p>This function is the main entry point for the webdown command-line tool. It handles the entire workflow: 1. Parsing command-line arguments 2. Converting the URL to Markdown with the specified options 3. Writing the output to a file or stdout 4. Error handling and reporting</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments as a list of strings. If None, defaults to   sys.argv[1:] (the command-line arguments passed to the script).</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Exit code: 0 for success, 1 for errors</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n0\n&gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n0\n&gt;&gt;&gt; main(['invalid-url'])  # Handle error\n1\n</code></pre> Source code in <code>webdown/cli.py</code> <pre><code>def main(args: Optional[List[str]] = None) -&gt; int:\n    \"\"\"Execute the webdown command-line interface.\n\n    This function is the main entry point for the webdown command-line tool.\n    It handles the entire workflow:\n    1. Parsing command-line arguments\n    2. Converting the URL to Markdown with the specified options\n    3. Writing the output to a file or stdout\n    4. Error handling and reporting\n\n    Args:\n        args: Command line arguments as a list of strings. If None, defaults to\n              sys.argv[1:] (the command-line arguments passed to the script).\n\n    Returns:\n        Exit code: 0 for success, 1 for errors\n\n    Examples:\n        &gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n        0\n        &gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n        0\n        &gt;&gt;&gt; main(['invalid-url'])  # Handle error\n        1\n    \"\"\"\n    try:\n        parsed_args = parse_args(args)\n\n        # If no URL provided, show help\n        if parsed_args.url is None:\n            # This will print help and exit\n            parse_args(\n                [\"-h\"]\n            )  # pragma: no cover - this exits so coverage tools can't track it\n            return 0  # pragma: no cover - unreachable after SystemExit\n\n        # Create a config object from command-line arguments\n        config = WebdownConfig(\n            # Basic options\n            url=parsed_args.url,\n            include_toc=parsed_args.toc,\n            include_links=not parsed_args.no_links,\n            include_images=not parsed_args.no_images,\n            css_selector=parsed_args.css,\n            compact_output=parsed_args.compact,\n            body_width=parsed_args.width,\n            show_progress=parsed_args.progress,\n            # Advanced options\n            single_line_break=parsed_args.single_line_break,\n            unicode_snob=parsed_args.unicode,\n            tables_as_html=parsed_args.tables_as_html,\n            emphasis_mark=parsed_args.emphasis_mark,\n            strong_mark=parsed_args.strong_mark,\n        )\n\n        # Convert using the config object\n        markdown = convert_url_to_markdown(config)\n\n        if parsed_args.output:\n            with open(parsed_args.output, \"w\", encoding=\"utf-8\") as f:\n                f.write(markdown)\n        else:\n            sys.stdout.write(markdown)\n\n        return 0\n\n    except Exception as e:\n        sys.stderr.write(f\"Error: {str(e)}\\n\")\n        return 1\n</code></pre>"},{"location":"api/cli/#cli-argument-parsing","title":"CLI Argument Parsing","text":"<p>Parse command line arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments (defaults to sys.argv[1:] if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Namespace</code> <p>Parsed arguments</p> Source code in <code>webdown/cli.py</code> <pre><code>def parse_args(args: Optional[List[str]] = None) -&gt; argparse.Namespace:\n    \"\"\"Parse command line arguments.\n\n    Args:\n        args: Command line arguments (defaults to sys.argv[1:] if None)\n\n    Returns:\n        Parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Convert web pages to clean, readable Markdown format.\",\n        epilog=\"For more information: https://github.com/kelp/webdown\",\n    )\n\n    # Required argument\n    parser.add_argument(\n        \"url\",\n        help=\"URL of the web page to convert (e.g., https://example.com)\",\n        nargs=\"?\",\n    )\n\n    # Input/Output options\n    io_group = parser.add_argument_group(\"Input/Output Options\")\n    io_group.add_argument(\n        \"-o\",\n        \"--output\",\n        metavar=\"FILE\",\n        help=\"Write Markdown output to FILE instead of stdout\",\n    )\n    io_group.add_argument(\n        \"-p\",\n        \"--progress\",\n        action=\"store_true\",\n        help=\"Display a progress bar during download (useful for large pages)\",\n    )\n\n    # Content options\n    content_group = parser.add_argument_group(\"Content Selection\")\n    content_group.add_argument(\n        \"-s\",\n        \"--css\",\n        metavar=\"SELECTOR\",\n        help=\"Extract content matching CSS selector (e.g., 'main', '.content')\",\n    )\n    content_group.add_argument(\n        \"-L\",\n        \"--no-links\",\n        action=\"store_true\",\n        help=\"Convert hyperlinks to plain text (remove all link markup)\",\n    )\n    content_group.add_argument(\n        \"-I\",\n        \"--no-images\",\n        action=\"store_true\",\n        help=\"Exclude images from the output completely\",\n    )\n\n    # Formatting options\n    format_group = parser.add_argument_group(\"Formatting Options\")\n    format_group.add_argument(\n        \"-t\",\n        \"--toc\",\n        action=\"store_true\",\n        help=\"Generate a table of contents based on headings in the document\",\n    )\n    format_group.add_argument(\n        \"-c\",\n        \"--compact\",\n        action=\"store_true\",\n        help=\"Remove excessive blank lines for more compact output\",\n    )\n    format_group.add_argument(\n        \"-w\",\n        \"--width\",\n        type=int,\n        default=0,\n        metavar=\"N\",\n        help=\"Set line width (0 disables wrapping, 80 recommended for readability)\",\n    )\n\n    # Add advanced HTML2Text options\n    advanced_group = parser.add_argument_group(\"Advanced Options\")\n    advanced_group.add_argument(\n        \"--single-line-break\",\n        action=\"store_true\",\n        help=\"Use single line breaks instead of double (creates more compact output)\",\n    )\n    advanced_group.add_argument(\n        \"--unicode\",\n        action=\"store_true\",\n        help=\"Use Unicode characters instead of ASCII equivalents\",\n    )\n    advanced_group.add_argument(\n        \"--tables-as-html\",\n        action=\"store_true\",\n        help=\"Keep tables as HTML instead of converting to Markdown\",\n    )\n    advanced_group.add_argument(\n        \"--emphasis-mark\",\n        default=\"_\",\n        metavar=\"CHAR\",\n        help=\"Character(s) for emphasis (default: '_', alternative: '*')\",\n    )\n    advanced_group.add_argument(\n        \"--strong-mark\",\n        default=\"**\",\n        metavar=\"CHARS\",\n        help=\"Character(s) for strong emphasis (default: '**', alt: '__')\",\n    )\n\n    # Meta options\n    meta_group = parser.add_argument_group(\"Meta Options\")\n    meta_group.add_argument(\n        \"-V\",\n        \"--version\",\n        action=\"version\",\n        version=f\"%(prog)s {__version__}\",\n        help=\"Show version information and exit\",\n    )\n\n    return parser.parse_args(args)\n</code></pre>"},{"location":"api/converter/","title":"Core API Reference","text":"<p>This page documents the core API for Webdown, including the <code>WebdownConfig</code> class and functions for converting HTML to Markdown.</p>"},{"location":"api/converter/#main-functions","title":"Main Functions","text":"<p>Convert a web page to markdown.</p> <p>This function accepts either a URL string or a WebdownConfig object. If a URL string is provided, the remaining parameters are used for configuration. If a WebdownConfig object is provided, all other parameters are ignored.</p> <p>Parameters:</p> Name Type Description Default <code>url_or_config</code> <code>Union[str, WebdownConfig]</code> <p>URL of the web page or a WebdownConfig object</p> required <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks (ignored if config provided)</p> <code>True</code> <code>include_images</code> <code>bool</code> <p>Whether to include images (ignored if config provided)</p> <code>True</code> <code>include_toc</code> <code>bool</code> <p>Generate table of contents (ignored if config provided)</p> <code>False</code> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector for extraction (ignored if config provided)</p> <code>None</code> <code>compact_output</code> <code>bool</code> <p>Whether to remove blank lines (ignored if config provided)</p> <code>False</code> <code>body_width</code> <code>int</code> <p>Maximum line length for text wrapping (ignored if config provided)</p> <code>0</code> <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar (ignored if config provided)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Markdown content</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or cannot be fetched</p> <p>Examples:</p> <p>Convert HTML to Markdown with various formatting options.</p> <p>This function takes HTML content and converts it to Markdown format. It provides many options to customize the output, from basic features like link/image handling to advanced formatting options.</p> <p>You can provide individual parameters or use a WebdownConfig object. If a config object is provided, it takes precedence over individual parameters.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>HTML content to convert as a string</p> required <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks or convert to plain text</p> <code>True</code> <code>include_images</code> <code>bool</code> <p>Whether to include images (True) or exclude them</p> <code>True</code> <code>include_toc</code> <code>bool</code> <p>Whether to generate table of contents based on headings</p> <code>False</code> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content</p> <code>None</code> <code>compact_output</code> <code>bool</code> <p>Whether to remove excessive blank lines in the output</p> <code>False</code> <code>body_width</code> <code>int</code> <p>Maximum line length for text wrapping (0 for no wrapping)</p> <code>0</code> <code>single_line_break</code> <code>bool</code> <p>Whether to use single line breaks instead of double</p> <code>False</code> <code>protect_links</code> <code>bool</code> <p>Whether to protect links from line wrapping</p> <code>False</code> <code>images_as_html</code> <code>bool</code> <p>Whether to keep images as HTML rather than Markdown</p> <code>False</code> <code>unicode_snob</code> <code>bool</code> <p>Whether to use Unicode characters instead of ASCII</p> <code>False</code> <code>tables_as_html</code> <code>bool</code> <p>Whether to keep tables as HTML rather than Markdown</p> <code>False</code> <code>emphasis_mark</code> <code>str</code> <p>Character to use for emphasis (default: \"_\")</p> <code>'_'</code> <code>strong_mark</code> <code>str</code> <p>Character to use for strong emphasis (default: \"**\")</p> <code>'**'</code> <code>default_image_alt</code> <code>str</code> <p>Default alt text for images without alt attributes</p> <code>''</code> <code>pad_tables</code> <code>bool</code> <p>Whether to add padding spaces for table alignment</p> <code>False</code> <code>wrap_list_items</code> <code>bool</code> <p>Whether to wrap list items to the body_width</p> <code>False</code> <code>config</code> <code>Optional[WebdownConfig]</code> <p>A WebdownConfig object with all options. If provided, all other parameters are ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A string containing the converted Markdown content</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n&gt;&gt;&gt; print(html_to_markdown(html))\n# Title\n</code></pre> <p>Content with link</p> <pre><code>&gt;&gt;&gt; print(html_to_markdown(html, include_links=False))\n# Title\n</code></pre> <p>Content with link</p> <pre><code>&gt;&gt;&gt; print(html_to_markdown(html, body_width=40))\n# Title\n</code></pre> <p>Content with link</p> Source code in <code>webdown/converter.py</code> <pre><code>def html_to_markdown(\n    html: str,\n    include_links: bool = True,\n    include_images: bool = True,\n    include_toc: bool = False,\n    css_selector: Optional[str] = None,\n    compact_output: bool = False,\n    body_width: int = 0,\n    # Advanced HTML2Text options\n    single_line_break: bool = False,\n    protect_links: bool = False,\n    images_as_html: bool = False,\n    unicode_snob: bool = False,\n    tables_as_html: bool = False,\n    emphasis_mark: str = \"_\",\n    strong_mark: str = \"**\",\n    default_image_alt: str = \"\",\n    pad_tables: bool = False,\n    wrap_list_items: bool = False,\n    # Config object support\n    config: Optional[WebdownConfig] = None,\n) -&gt; str:\n    \"\"\"Convert HTML to Markdown with various formatting options.\n\n    This function takes HTML content and converts it to Markdown format.\n    It provides many options to customize the output, from basic features like\n    link/image handling to advanced formatting options.\n\n    You can provide individual parameters or use a WebdownConfig object.\n    If a config object is provided, it takes precedence over individual parameters.\n\n    Args:\n        html (str): HTML content to convert as a string\n        include_links (bool): Whether to include hyperlinks or convert to plain text\n        include_images (bool): Whether to include images (True) or exclude them\n        include_toc (bool): Whether to generate table of contents based on headings\n        css_selector (Optional[str]): CSS selector to extract specific content\n        compact_output (bool): Whether to remove excessive blank lines in the output\n        body_width (int): Maximum line length for text wrapping (0 for no wrapping)\n        single_line_break (bool): Whether to use single line breaks instead of double\n        protect_links (bool): Whether to protect links from line wrapping\n        images_as_html (bool): Whether to keep images as HTML rather than Markdown\n        unicode_snob (bool): Whether to use Unicode characters instead of ASCII\n        tables_as_html (bool): Whether to keep tables as HTML rather than Markdown\n        emphasis_mark (str): Character to use for emphasis (default: \"_\")\n        strong_mark (str): Character to use for strong emphasis (default: \"**\")\n        default_image_alt (str): Default alt text for images without alt attributes\n        pad_tables (bool): Whether to add padding spaces for table alignment\n        wrap_list_items (bool): Whether to wrap list items to the body_width\n        config (Optional[WebdownConfig]): A WebdownConfig object with all options.\n            If provided, all other parameters are ignored.\n\n    Returns:\n        A string containing the converted Markdown content\n\n    Examples:\n        &gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n        &gt;&gt;&gt; print(html_to_markdown(html))\n        # Title\n\n        Content with [link](#)\n\n        &gt;&gt;&gt; print(html_to_markdown(html, include_links=False))\n        # Title\n\n        Content with link\n\n        &gt;&gt;&gt; print(html_to_markdown(html, body_width=40))\n        # Title\n\n        Content with [link](#)\n    \"\"\"\n    # Extract specific content by CSS selector if provided\n    if css_selector:\n        soup = BeautifulSoup(html, \"html.parser\")\n        selected = soup.select(css_selector)\n        if selected:\n            html = \"\".join(str(element) for element in selected)\n\n    # Use config object if provided, otherwise use individual parameters\n    if config is not None:\n        # Override parameters with config values\n        include_links = config.include_links\n        include_images = config.include_images\n        include_toc = config.include_toc\n        css_selector = config.css_selector\n        compact_output = config.compact_output\n        body_width = config.body_width\n        single_line_break = config.single_line_break\n        protect_links = config.protect_links\n        images_as_html = config.images_as_html\n        unicode_snob = config.unicode_snob\n        tables_as_html = config.tables_as_html\n        emphasis_mark = config.emphasis_mark\n        strong_mark = config.strong_mark\n        default_image_alt = config.default_image_alt\n        pad_tables = config.pad_tables\n        wrap_list_items = config.wrap_list_items\n\n    # Configure html2text\n    h = html2text.HTML2Text()\n\n    # Basic options\n    h.ignore_links = not include_links\n    h.ignore_images = not include_images\n    h.body_width = body_width  # User-defined line width\n\n    # Advanced options\n    h.single_line_break = single_line_break\n    h.protect_links = protect_links\n    h.images_as_html = images_as_html\n    h.unicode_snob = unicode_snob\n    h.bypass_tables = tables_as_html  # Note: bypass_tables is the opposite of md tables\n    h.emphasis_mark = emphasis_mark\n    h.strong_mark = strong_mark\n    h.default_image_alt = default_image_alt\n    h.pad_tables = pad_tables\n    h.wrap_list_items = wrap_list_items\n\n    markdown = h.handle(html)\n\n    # Post-process the markdown\n    import re\n\n    # Remove zero-width spaces and other invisible characters\n    markdown = re.sub(r\"[\\u200B\\u200C\\u200D\\uFEFF]\", \"\", markdown)\n\n    # Post-process to remove excessive blank lines if requested\n    if compact_output:\n        # Replace 3 or more consecutive newlines with just 2\n        markdown = re.sub(r\"\\n{3,}\", \"\\n\\n\", markdown)\n\n    # Add table of contents if requested\n    if include_toc:\n        headings = re.findall(r\"^(#{1,6})\\s+(.+)$\", markdown, re.MULTILINE)\n\n        if headings:\n            toc = [\"# Table of Contents\\n\"]\n            for markers, title in headings:\n                level = len(markers) - 1  # Adjust for 0-based indentation\n                indent = \"  \" * level\n                link = title.lower().replace(\" \", \"-\")\n                # Clean the link of non-alphanumeric characters\n                link = re.sub(r\"[^\\w-]\", \"\", link)\n                toc.append(f\"{indent}- [{title}](#{link})\")\n\n            markdown = \"\\n\".join(toc) + \"\\n\\n\" + markdown\n\n    # The return type is explicitly str, so we ensure it's returned as a string\n    return str(markdown)\n</code></pre>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-individual-parameters-backward-compatible","title":"Using individual parameters (backward compatible)","text":"<p>markdown = convert_url_to_markdown(     \"https://example.com\",     include_toc=True,     show_progress=True )</p>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-config-object-new-approach","title":"Using config object (new approach)","text":"<p>config = WebdownConfig(     url=\"https://example.com\",     include_toc=True,     show_progress=True ) markdown = convert_url_to_markdown(config)</p> Source code in <code>webdown/converter.py</code> <pre><code>def convert_url_to_markdown(\n    url_or_config: str | WebdownConfig,\n    include_links: bool = True,\n    include_images: bool = True,\n    include_toc: bool = False,\n    css_selector: Optional[str] = None,\n    compact_output: bool = False,\n    body_width: int = 0,\n    show_progress: bool = False,\n) -&gt; str:\n    \"\"\"Convert a web page to markdown.\n\n    This function accepts either a URL string or a WebdownConfig object.\n    If a URL string is provided, the remaining parameters are used for configuration.\n    If a WebdownConfig object is provided, all other parameters are ignored.\n\n    Args:\n        url_or_config (Union[str, WebdownConfig]):\n            URL of the web page or a WebdownConfig object\n\n        include_links (bool):\n            Whether to include hyperlinks (ignored if config provided)\n\n        include_images (bool):\n            Whether to include images (ignored if config provided)\n\n        include_toc (bool):\n            Generate table of contents (ignored if config provided)\n\n        css_selector (Optional[str]):\n            CSS selector for extraction (ignored if config provided)\n\n        compact_output (bool):\n            Whether to remove blank lines (ignored if config provided)\n\n        body_width (int):\n            Maximum line length for text wrapping (ignored if config provided)\n\n        show_progress (bool):\n            Whether to display a progress bar (ignored if config provided)\n\n    Returns:\n        str: Markdown content\n\n    Raises:\n        WebdownError: If URL is invalid or cannot be fetched\n\n    Examples:\n        # Using individual parameters (backward compatible)\n        markdown = convert_url_to_markdown(\n            \"https://example.com\",\n            include_toc=True,\n            show_progress=True\n        )\n\n        # Using config object (new approach)\n        config = WebdownConfig(\n            url=\"https://example.com\",\n            include_toc=True,\n            show_progress=True\n        )\n        markdown = convert_url_to_markdown(config)\n    \"\"\"\n    # Determine if we're using a config object or URL string\n    if isinstance(url_or_config, WebdownConfig):\n        config = url_or_config\n        if config.url is None:\n            raise WebdownError(\"URL must be provided in the config object\")\n        url = config.url\n        include_links = config.include_links\n        include_images = config.include_images\n        include_toc = config.include_toc\n        css_selector = config.css_selector\n        compact_output = config.compact_output\n        body_width = config.body_width\n        show_progress = config.show_progress\n    else:\n        # Using the traditional parameter-based approach\n        url = url_or_config\n\n    html = fetch_url(url, show_progress=show_progress)\n\n    if isinstance(url_or_config, WebdownConfig):\n        # Pass the config object to html_to_markdown\n        return html_to_markdown(html, config=config)\n    else:\n        # Use individual parameters\n        return html_to_markdown(\n            html,\n            include_links=include_links,\n            include_images=include_images,\n            include_toc=include_toc,\n            css_selector=css_selector,\n            compact_output=compact_output,\n            body_width=body_width,\n        )\n</code></pre>"},{"location":"api/converter/#configuration","title":"Configuration","text":"<p>Configuration options for HTML to Markdown conversion.</p> <p>This class centralizes all configuration options for the conversion process, making it easier to manage and extend the functionality.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>Optional[str]</code> <p>URL of the web page to convert</p> <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks (True) or plain text (False)</p> <code>include_images</code> <code>bool</code> <p>Whether to include images (True) or exclude them</p> <code>include_toc</code> <code>bool</code> <p>Whether to generate table of contents</p> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content</p> <code>compact_output</code> <code>bool</code> <p>Whether to remove excessive blank lines</p> <code>body_width</code> <code>int</code> <p>Maximum line length for wrapping (0 for no wrapping)</p> <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> <code>single_line_break</code> <code>bool</code> <p>Whether to use single line breaks (True) or double</p> <code>protect_links</code> <code>bool</code> <p>Whether to protect links from line wrapping</p> <code>images_as_html</code> <code>bool</code> <p>Whether to keep images as HTML rather than Markdown</p> <code>unicode_snob</code> <code>bool</code> <p>Whether to use Unicode characters instead of ASCII</p> <code>tables_as_html</code> <code>bool</code> <p>Whether to keep tables as HTML rather than Markdown</p> <code>emphasis_mark</code> <code>str</code> <p>Character to use for emphasis (usually underscore)</p> <code>strong_mark</code> <code>str</code> <p>Character to use for strong emphasis (usually asterisks)</p> <code>default_image_alt</code> <code>str</code> <p>Default alt text to use when images don't have any</p> <code>pad_tables</code> <code>bool</code> <p>Whether to add padding spaces for table alignment</p> <code>wrap_list_items</code> <code>bool</code> <p>Whether to wrap list items to the body_width</p> Source code in <code>webdown/converter.py</code> <pre><code>@dataclass\nclass WebdownConfig:\n    \"\"\"Configuration options for HTML to Markdown conversion.\n\n    This class centralizes all configuration options for the conversion process,\n    making it easier to manage and extend the functionality.\n\n    Attributes:\n        url (Optional[str]): URL of the web page to convert\n        include_links (bool): Whether to include hyperlinks (True) or plain text (False)\n        include_images (bool): Whether to include images (True) or exclude them\n        include_toc (bool): Whether to generate table of contents\n        css_selector (Optional[str]): CSS selector to extract specific content\n        compact_output (bool): Whether to remove excessive blank lines\n        body_width (int): Maximum line length for wrapping (0 for no wrapping)\n        show_progress (bool): Whether to display a progress bar during download\n        single_line_break (bool): Whether to use single line breaks (True) or double\n        protect_links (bool): Whether to protect links from line wrapping\n        images_as_html (bool): Whether to keep images as HTML rather than Markdown\n        unicode_snob (bool): Whether to use Unicode characters instead of ASCII\n        tables_as_html (bool): Whether to keep tables as HTML rather than Markdown\n        emphasis_mark (str): Character to use for emphasis (usually underscore)\n        strong_mark (str): Character to use for strong emphasis (usually asterisks)\n        default_image_alt (str): Default alt text to use when images don't have any\n        pad_tables (bool): Whether to add padding spaces for table alignment\n        wrap_list_items (bool): Whether to wrap list items to the body_width\n    \"\"\"\n\n    # Basic options\n    url: Optional[str] = None\n    include_links: bool = True\n    include_images: bool = True\n    include_toc: bool = False\n    css_selector: Optional[str] = None\n    compact_output: bool = False\n    body_width: int = 0\n    show_progress: bool = False\n\n    # Advanced HTML2Text options\n    single_line_break: bool = False\n    protect_links: bool = False\n    images_as_html: bool = False\n    unicode_snob: bool = False\n    tables_as_html: bool = False  # Equivalent to bypass_tables in html2text\n    emphasis_mark: str = \"_\"\n    strong_mark: str = \"**\"\n    default_image_alt: str = \"\"\n    pad_tables: bool = False\n    wrap_list_items: bool = False\n</code></pre>"},{"location":"api/converter/#webdown.converter.WebdownConfig-attributes","title":"Attributes","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.body_width","title":"<code>body_width = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.compact_output","title":"<code>compact_output = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.css_selector","title":"<code>css_selector = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.default_image_alt","title":"<code>default_image_alt = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.emphasis_mark","title":"<code>emphasis_mark = '_'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.images_as_html","title":"<code>images_as_html = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_images","title":"<code>include_images = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_links","title":"<code>include_links = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_toc","title":"<code>include_toc = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.pad_tables","title":"<code>pad_tables = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.protect_links","title":"<code>protect_links = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.show_progress","title":"<code>show_progress = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.single_line_break","title":"<code>single_line_break = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.strong_mark","title":"<code>strong_mark = '**'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.tables_as_html","title":"<code>tables_as_html = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.unicode_snob","title":"<code>unicode_snob = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.url","title":"<code>url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.wrap_list_items","title":"<code>wrap_list_items = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig-functions","title":"Functions","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.__init__","title":"<code>__init__(url=None, include_links=True, include_images=True, include_toc=False, css_selector=None, compact_output=False, body_width=0, show_progress=False, single_line_break=False, protect_links=False, images_as_html=False, unicode_snob=False, tables_as_html=False, emphasis_mark='_', strong_mark='**', default_image_alt='', pad_tables=False, wrap_list_items=False)</code>","text":""},{"location":"api/converter/#error-handling","title":"Error Handling","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for webdown errors.</p> <p>This exception class is used for all errors raised by the webdown package. The error type is indicated by a descriptive message and can be distinguished by checking the message content.</p> Error types include <p>URL format errors: When the URL doesn't follow standard format Network errors: Connection issues, timeouts, HTTP errors Parsing errors: Issues with processing the HTML content</p> Source code in <code>webdown/converter.py</code> <pre><code>class WebdownError(Exception):\n    \"\"\"Exception for webdown errors.\n\n    This exception class is used for all errors raised by the webdown package.\n    The error type is indicated by a descriptive message and can be\n    distinguished by checking the message content.\n\n    Error types include:\n        URL format errors: When the URL doesn't follow standard format\n        Network errors: Connection issues, timeouts, HTTP errors\n        Parsing errors: Issues with processing the HTML content\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/converter/#utility-functions","title":"Utility Functions","text":"<p>Validate URL format.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to validate</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if valid, False otherwise</p> <p>validate_url('https://example.com') True validate_url('not_a_url') False</p> Source code in <code>webdown/converter.py</code> <pre><code>def validate_url(url: str) -&gt; bool:\n    \"\"\"Validate URL format.\n\n    Args:\n        url: URL to validate\n\n    Returns:\n        True if valid, False otherwise\n\n    &gt;&gt;&gt; validate_url('https://example.com')\n    True\n    &gt;&gt;&gt; validate_url('not_a_url')\n    False\n    \"\"\"\n    parsed = urlparse(url)\n    return bool(parsed.scheme and parsed.netloc)\n</code></pre> <p>Fetch HTML content from URL with optional progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to fetch</p> required <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML content as string</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or cannot be fetched</p> Source code in <code>webdown/converter.py</code> <pre><code>def fetch_url(url: str, show_progress: bool = False) -&gt; str:\n    \"\"\"Fetch HTML content from URL with optional progress bar.\n\n    Args:\n        url: URL to fetch\n        show_progress: Whether to display a progress bar during download\n\n    Returns:\n        HTML content as string\n\n    Raises:\n        WebdownError: If URL is invalid or cannot be fetched\n    \"\"\"\n    if not validate_url(url):\n        raise WebdownError(f\"Invalid URL format: {url}\")\n\n    try:\n        # Stream the response to show download progress\n        if show_progress:\n            # First make a HEAD request to get the content length\n            head_response = requests.head(url, timeout=5)\n            head_response.raise_for_status()\n            total_size = int(head_response.headers.get(\"content-length\", 0))\n\n            # Now make the GET request with stream=True\n            response = requests.get(url, timeout=10, stream=True)\n            response.raise_for_status()\n\n            # Create a buffer to store the content\n            content = io.StringIO()\n\n            # Create a progress bar\n            with tqdm(\n                total=total_size,\n                unit=\"B\",\n                unit_scale=True,\n                unit_divisor=1024,\n                desc=f\"Downloading {url.split('/')[-1] or 'webpage'}\",\n                disable=not show_progress,\n            ) as progress_bar:\n                # Decode each chunk and update the progress bar\n                for chunk in response.iter_content(\n                    chunk_size=1024, decode_unicode=True\n                ):\n                    if chunk:\n                        progress_bar.update(len(chunk.encode(\"utf-8\")))\n                        content.write(chunk)\n\n            return content.getvalue()\n        else:\n            # Regular request without progress bar\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            return str(response.text)\n    except requests.exceptions.Timeout:\n        raise WebdownError(f\"Connection timed out while fetching {url}\")\n    except requests.exceptions.ConnectionError:\n        raise WebdownError(f\"Connection error while fetching {url}\")\n    except requests.exceptions.HTTPError as e:\n        raise WebdownError(f\"HTTP error {e.response.status_code} while fetching {url}\")\n    except requests.exceptions.RequestException as e:\n        raise WebdownError(f\"Error fetching {url}: {str(e)}\")\n</code></pre>"}]}