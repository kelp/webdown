{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webdown","text":"<p>A Python CLI tool for converting web pages to clean, readable Markdown format. Webdown makes it easy to extract content from websites for documentation, notes, content migration, or offline reading.</p> <p>I made this tool specifically so I could download documentation, convert it to Markdown and feed it into an LLM coding tool.</p>"},{"location":"#why-webdown","title":"Why Webdown?","text":"<ul> <li>Clean Conversion: Produces readable Markdown without formatting artifacts</li> <li>Selective Extraction: Target specific page sections with CSS selectors</li> <li>Customization Options: Control links, images, text wrapping, and more</li> <li>Progress Tracking: Visual download progress for large pages with <code>-p</code> flag</li> <li>Python Integration: Use as a CLI tool or integrate into your Python projects</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#documentation-for-ai-coding-assistants","title":"Documentation for AI Coding Assistants","text":"<p>Webdown is particularly useful for preparing documentation to use with AI-assisted coding tools like Claude Code, GitHub Copilot, or ChatGPT:</p> <ul> <li>Convert technical documentation into clean Markdown for AI context</li> <li>Extract only the relevant parts of large documentation pages using CSS selectors</li> <li>Strip out images and formatting that might consume token context</li> <li>Generate well-structured tables of contents for better navigation</li> <li>Batch process API documentation for library-specific assistance</li> </ul> <pre><code># Example: Convert API docs and store for AI coding context\nwebdown https://api.example.com/docs -s \"main\" -I -c -w 80 -o api_context.md\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install webdown\n</code></pre>"},{"location":"#install-from-source","title":"Install from Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/kelp/webdown.git\ncd webdown\n\n# Install with pip\npip install .\n\n# Or install with Poetry\npoetry install\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Basic usage:</p> <pre><code>webdown https://example.com/page.html -o output.md\n</code></pre> <p>Output to stdout:</p> <pre><code>webdown https://example.com/page.html\n</code></pre>"},{"location":"#options","title":"Options","text":"<ul> <li><code>-o, --output</code>: Output file (default: stdout)</li> <li><code>-t, --toc</code>: Generate table of contents</li> <li><code>-L, --no-links</code>: Strip hyperlinks</li> <li><code>-I, --no-images</code>: Exclude images</li> <li><code>-s, --css SELECTOR</code>: CSS selector to extract specific content</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set the line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar</li> </ul> <p>Advanced Options:</p> <ul> <li><code>--single-line-break</code>: Use single line breaks instead of two line breaks</li> <li><code>--unicode</code>: Use Unicode characters instead of ASCII equivalents</li> <li><code>--tables-as-html</code>: Keep tables as HTML instead of converting to Markdown</li> <li><code>--emphasis-mark CHAR</code>: Character(s) to use for emphasis (default: '_')</li> <li><code>--strong-mark CHARS</code>: Character(s) to use for strong emphasis (default: '**')</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>Generate markdown with a table of contents:</p> <pre><code>webdown https://example.com -t -o output.md\n</code></pre> <p>Extract only main content:</p> <pre><code>webdown https://example.com -s \"main\" -o output.md\n</code></pre> <p>Strip links and images:</p> <pre><code>webdown https://example.com -L -I -o output.md\n</code></pre> <p>Compact output with progress bar and line wrapping:</p> <pre><code>webdown https://example.com -c -p -w 80 -o output.md\n</code></pre> <p>For complete documentation, use the <code>--help</code> flag:</p> <pre><code>webdown --help\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>API documentation is available online at tcole.net/webdown.</p> <p>You can also generate the documentation locally with:</p> <pre><code>make docs        # Generate HTML docs in the docs/ directory\nmake docs-serve  # Start a local documentation server at http://localhost:8080\n</code></pre>"},{"location":"#development","title":"Development","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ (3.13 recommended)</li> <li>Poetry for dependency management</li> </ul>"},{"location":"#setup","title":"Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/kelp/webdown.git\ncd webdown\n\n# Install dependencies with Poetry\npoetry install\npoetry run pre-commit install\n\n# Optional: Start a Poetry shell for interactive development\npoetry shell\n</code></pre>"},{"location":"#development-commands","title":"Development Commands","text":"<p>We use a Makefile to streamline development tasks:</p> <pre><code># Install dependencies\nmake install\n\n# Run tests\nmake test\n\n# Run tests with coverage\nmake test-coverage\n\n# Run integration tests\nmake integration-test\n\n# Run linting\nmake lint\n\n# Run type checking\nmake type-check\n\n# Format code\nmake format\n\n# Run all pre-commit hooks\nmake pre-commit\n\n# Run all checks (lint, type-check, test)\nmake all-checks\n\n# Build package\nmake build\n\n# Start interactive Poetry shell\nmake shell\n\n# Generate documentation\nmake docs\n\n# Start documentation server\nmake docs-serve\n\n# Publishing to PyPI (maintainers only)\n# See CONTRIBUTING.md for details on the release process\nmake build         # Build package\nmake publish-test  # Publish to TestPyPI (for testing)\n\n# Show all available commands\nmake help\n</code></pre>"},{"location":"#poetry-commands","title":"Poetry Commands","text":"<p>You can also use Poetry directly:</p> <pre><code># Start an interactive shell in the Poetry environment\npoetry shell\n\n# Run a command in the Poetry environment\npoetry run pytest\n\n# Add a new dependency\npoetry add requests\n\n# Add a development dependency\npoetry add --group dev black\n\n# Update dependencies\npoetry update\n\n# Build package\npoetry build\n</code></pre>"},{"location":"#python-api-usage","title":"Python API Usage","text":"<p>Webdown can also be used as a Python library in your own projects:</p> <pre><code>from webdown.converter import convert_url_to_markdown, WebdownConfig\n\n# Method 1: Basic conversion with individual parameters\nmarkdown = convert_url_to_markdown(\"https://example.com\")\n\n# Method 1: With all options as parameters (original style)\nmarkdown = convert_url_to_markdown(\n    url=\"https://example.com\",\n    include_links=True,\n    include_images=True,\n    include_toc=True,\n    css_selector=\"main\",  # Only extract main content\n    compact_output=True,  # Remove excessive blank lines\n    body_width=80,        # Wrap text at 80 characters\n    show_progress=True    # Show download progress bar\n)\n\n# Method 2: Using the Config object (new in 0.3.1)\nconfig = WebdownConfig(\n    # Basic options\n    url=\"https://example.com\",\n    include_toc=True,\n    css_selector=\"main\",\n    compact_output=True,\n    body_width=80,\n    show_progress=True,\n\n    # Advanced options (all optional)\n    single_line_break=False,\n    unicode_snob=True,  # Use Unicode characters\n    tables_as_html=False,\n    emphasis_mark=\"_\",\n    strong_mark=\"**\"\n)\nmarkdown = convert_url_to_markdown(config)\n\n# Save to file\nwith open(\"output.md\", \"w\") as f:\n    f.write(markdown)\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Run tests to make sure everything works:    <pre><code># Run standard tests\npoetry run pytest\n\n# Run tests with coverage\npoetry run pytest --cov=webdown\n\n# Run integration tests\npoetry run pytest --integration\n</code></pre></li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol> <p>Please make sure your code passes all tests, type checks, and follows our coding style (enforced by pre-commit hooks). We aim to maintain high code coverage (currently at 93%). When adding features, please include tests.</p> <p>For more details, see CONTRIBUTING.md.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any problems or have feature requests, please open an issue on GitHub.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - see the LICENSE file for details.</p> <p>Documentation Links</p> <p>For full documentation, check out these additional resources: - API Reference - Detailed documentation for Python API - Changelog - Version history and changes - Contributing Guide - How to contribute to the project - License - MIT License details</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog_1","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#041-2025-03-15","title":"[0.4.1] - 2025-03-15","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added pdoc documentation generation with <code>make docs</code> and <code>make docs-serve</code> commands</li> <li>Generated documentation now available in the <code>docs/</code> directory</li> </ul>"},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Enhanced CLI documentation with detailed explanations and practical examples</li> <li>Improved command-line help with logically organized option groups and better descriptions</li> <li>Added epilog with link to project repository</li> </ul>"},{"location":"changelog/#040-2025-03-15","title":"[0.4.0] - 2025-03-15","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Introduced WebdownConfig class for better parameter organization and configuration</li> <li>Added comprehensive support for advanced HTML2Text options in both CLI and API:</li> <li>Single line break mode (<code>--single-line-break</code>)</li> <li>Unicode character support (<code>--unicode</code>)</li> <li>HTML tables preservation (<code>--tables-as-html</code>)</li> <li>Custom emphasis and strong emphasis markers (<code>--emphasis-mark</code>, <code>--strong-mark</code>)</li> <li>Link protection, image handling options, and more in the API</li> <li>Improved CLI with advanced options group for better help display</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Simplified the exception hierarchy to a single WebdownError class</li> <li>Updated API to support both parameter-based and config-based approaches</li> <li>Improved documentation with detailed examples for new features</li> <li>Updated all dependencies to latest versions</li> <li>html2text updated from 2020.1.16 to 2024.2.26</li> <li>beautifulsoup4, requests, tqdm and all dev dependencies updated to latest versions</li> </ul>"},{"location":"changelog/#031-2025-03-15","title":"[0.3.1] - 2025-03-15","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Updated all dependencies to latest versions</li> <li>html2text updated from 2020.1.16 to 2024.2.26</li> <li>beautifulsoup4, requests, tqdm and all dev dependencies updated to latest versions</li> </ul>"},{"location":"changelog/#030-2025-03-15","title":"[0.3.0] - 2025-03-15","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Command-line option <code>-w/--width</code> to set html2text body_width for text wrapping</li> <li>Progress bar for downloads with new <code>-p/--progress</code> flag</li> <li>Support for CSS selectors with <code>-s/--css</code> to extract specific page sections</li> <li>Compact output option with <code>-c/--compact</code> to remove excessive blank lines</li> <li>Automatic removal of zero-width spaces and other invisible characters</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Migrated to modern Python packaging using Poetry</li> <li>Updated Python requirements to 3.10+</li> <li>Changed CSS selector flag from <code>-c</code> to <code>-s</code> to avoid conflict with compact flag</li> <li>Improved documentation with comprehensive docstrings</li> <li>Enhanced test coverage to 100% (excluding integration tests)</li> </ul>"},{"location":"changelog/#020-2025-03-12","title":"[0.2.0] - 2025-03-12","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Initial release with basic web to markdown conversion</li> <li>Support for table of contents generation</li> <li>Link and image handling options</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":""},{"location":"contributing/#contributing-to-webdown","title":"Contributing to Webdown","text":"<p>Thank you for your interest in contributing to Webdown! This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Poetry for dependency management</li> <li>Git</li> </ul>"},{"location":"contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/kelp/webdown.git\ncd webdown\n</code></pre></p> </li> <li> <p>Install dependencies using Poetry:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Install pre-commit hooks:    <pre><code>poetry run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-commands","title":"Development Commands","text":"<p>We use a Makefile to simplify common development tasks:</p> <ul> <li>Install dependencies: <code>make install</code></li> <li>Install for local development: <code>make install-dev</code></li> <li>Run tests: <code>make test</code></li> <li>Run tests with coverage: <code>make test-coverage</code></li> <li>Run integration tests: <code>make integration-test</code></li> <li>Run linting: <code>make lint</code></li> <li>Run type checking: <code>make type-check</code></li> <li>Format code: <code>make format</code></li> <li>Run all checks: <code>make all-checks</code></li> </ul> <p>You can also use Poetry directly: <pre><code>poetry run pytest\npoetry run mypy webdown\npoetry run flake8 webdown\npoetry run black webdown\n</code></pre></p>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<p>This project follows PEP 8 conventions with some modifications enforced by Black and flake8:</p> <ul> <li>Use 4 spaces for indentation (enforced by Black)</li> <li>Line length is limited to 88 characters (enforced by Black)</li> <li>Follow naming conventions:</li> <li>Classes: <code>CamelCase</code></li> <li>Functions and variables: <code>snake_case</code></li> <li>Constants: <code>UPPER_CASE</code></li> </ul>"},{"location":"contributing/#type-hinting","title":"Type Hinting","text":"<p>All code should use Python type hints:</p> <pre><code>def function(parameter: str, optional_param: Optional[int] = None) -&gt; bool:\n    \"\"\"Function documentation.\"\"\"\n    ...\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>All modules, classes, and functions should have docstrings.</li> <li>Use the Google docstring format:</li> </ul> <pre><code>def function(param1: str, param2: int) -&gt; bool:\n    \"\"\"Short description of function.\n\n    Longer description explaining details if needed.\n\n    Args:\n        param1: Description of param1\n        param2: Description of param2\n\n    Returns:\n        Description of return value\n\n    Raises:\n        ExceptionType: When and why this exception is raised\n    \"\"\"\n</code></pre>"},{"location":"contributing/#updating-documentation","title":"Updating Documentation","text":"<p>After making changes to the codebase, especially when adding new features or modifying existing ones:</p> <ol> <li>Update the docstrings in the code with implementation details</li> <li>Update the README.md with any new command-line options or examples</li> <li>Update CHANGELOG.md with user-facing changes</li> </ol> <p>The CLI argument parser in <code>webdown/cli.py</code> is the source of truth for command-line options, and the README.md is the main user documentation.</p>"},{"location":"contributing/#error-handling","title":"Error Handling","text":"<ul> <li>Use custom exception classes defined in <code>converter.py</code></li> <li>Provide meaningful error messages</li> <li>Document all possible exceptions in docstrings</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Write tests for all new functionality</li> <li>Tests should be placed in the <code>webdown/tests</code> directory</li> <li>Follow test class naming: <code>TestClassName</code></li> <li>Follow test method naming: <code>test_functionality_being_tested</code></li> <li>Use fixtures where appropriate to reduce code duplication</li> </ul>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<ul> <li>Run all tests: <code>make test</code></li> <li>Run with coverage: <code>make test-coverage</code></li> <li>Run integration tests: <code>make integration-test</code></li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a feature branch</li> <li>Implement your changes, following the coding standards</li> <li>Ensure all tests pass, including new tests for your feature</li> <li>Update documentation if needed</li> <li>Submit a pull request with a clear description of the changes</li> <li>Address any feedback in code reviews</li> </ol>"},{"location":"contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for functionality added in a backward-compatible manner</li> <li>PATCH version for backward-compatible bug fixes</li> </ul>"},{"location":"contributing/#publishing-to-pypi-maintainers-only","title":"Publishing to PyPI (Maintainers Only)","text":"<p>Webdown uses GitHub Actions to automate the release process:</p> <ol> <li>Update version number in:</li> <li><code>pyproject.toml</code></li> <li><code>webdown/__init__.py</code></li> <li>Update <code>CHANGELOG.md</code> with the new version and changes</li> <li>Commit the version bump changes</li> <li>Run the release target to verify everything and create the tag:    <pre><code>make release\n</code></pre></li> <li>If the release target succeeds, push the tag to trigger the release:    <pre><code>git push origin v0.4.x\n</code></pre></li> <li>The GitHub Actions workflow will:</li> <li>Verify the version numbers match</li> <li>Run tests</li> <li>Build the package</li> <li>Create a GitHub release with content from CHANGELOG.md</li> <li>Publish to PyPI automatically</li> </ol> <p>For local testing before a release, you can use: - <code>make build</code> to build the package locally - <code>make publish-test</code> to publish to TestPyPI</p> <p>Note: PyPI publishing uses GitHub's OIDC and PyPI's Trusted Publishers feature for secure authentication without tokens.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the project's MIT License (see LICENSE file).</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have any questions or need help, please open an issue or contact the maintainers directly.</p> <p>Thank you for your contributions!</p>"},{"location":"api/","title":"API Reference","text":"<p>Webdown provides a simple API for converting web pages to Markdown. The main modules are:</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li>Converter - Core functionality for HTML to Markdown conversion</li> <li>CLI - Command-line interface for the package</li> </ul>"},{"location":"api/#quick-start","title":"Quick Start","text":"<pre><code>from webdown.converter import convert_url_to_markdown\n\n# Basic usage\nmarkdown = convert_url_to_markdown(\"https://example.com\")\n\n# With options\nmarkdown = convert_url_to_markdown(\n    url=\"https://example.com\",\n    include_toc=True,\n    compact_output=True,\n    body_width=80\n)\n\n# Save to file\nwith open(\"output.md\", \"w\") as f:\n    f.write(markdown)\n</code></pre> <p>For more details, see the Converter API documentation.</p>"},{"location":"api/cli/","title":"Command-Line Interface","text":"<p>Command-line interface for webdown.</p> <p>This module provides the command-line interface (CLI) for Webdown, a tool for converting web pages to clean, readable Markdown format. The CLI allows users to customize various aspects of the conversion process, from content selection to formatting options.</p>"},{"location":"api/cli/#webdown.cli--basic-usage","title":"Basic Usage","text":"<p>The most basic usage is to simply provide a URL:</p> <pre><code>webdown https://example.com\n</code></pre> <p>This will fetch the web page and convert it to Markdown, displaying the result to stdout. To save the output to a file:</p> <pre><code>webdown https://example.com -o output.md\n</code></pre>"},{"location":"api/cli/#webdown.cli--common-options","title":"Common Options","text":"<p>The CLI offers various options to customize the conversion:</p> <ul> <li><code>-o, --output FILE</code>: Write output to FILE instead of stdout</li> <li><code>-t, --toc</code>: Generate a table of contents based on headings</li> <li><code>-L, --no-links</code>: Strip hyperlinks, converting them to plain text</li> <li><code>-I, --no-images</code>: Exclude images from the output</li> <li><code>-s, --css SELECTOR</code>: Extract only content matching the CSS selector (e.g., \"main\")</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar</li> <li><code>-V, --version</code>: Show version information and exit</li> <li><code>-h, --help</code>: Show help message and exit</li> </ul>"},{"location":"api/cli/#webdown.cli--advanced-options","title":"Advanced Options","text":"<p>Advanced formatting options for fine-tuning the Markdown output:</p> <ul> <li><code>--single-line-break</code>: Use single line breaks instead of two line breaks</li> <li><code>--unicode</code>: Use Unicode characters instead of ASCII equivalents</li> <li><code>--tables-as-html</code>: Keep tables as HTML instead of converting to Markdown</li> <li><code>--emphasis-mark CHAR</code>: Character(s) to use for emphasis (default: '_')</li> <li><code>--strong-mark CHARS</code>: Character(s) to use for strong emphasis (default: '**')</li> </ul>"},{"location":"api/cli/#webdown.cli--example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>Basic conversion with a table of contents:    <pre><code>webdown https://example.com -t -o output.md\n</code></pre></p> </li> <li> <p>Extract only the main content area with compact output and text wrapping:    <pre><code>webdown https://example.com -s \"main\" -c -w 80 -o output.md\n</code></pre></p> </li> <li> <p>Create a plain text version (no links or images):    <pre><code>webdown https://example.com -L -I -o text_only.md\n</code></pre></p> </li> <li> <p>Show download progress for large pages and customize Markdown formatting:    <pre><code>webdown https://example.com -p --single-line-break --unicode -o output.md\n</code></pre></p> </li> <li> <p>Extract content from a specific div and customize emphasis markers:    <pre><code>webdown https://example.com -s \"#content\" --emphasis-mark \"*\"      --strong-mark \"__\" -o output.md\n</code></pre></p> </li> </ol> <p>The entry point is the <code>main()</code> function, which is called when the command <code>webdown</code> is executed.</p>"},{"location":"api/cli/#functions-reference","title":"Functions Reference","text":"<p>Command-line interface for webdown.</p> <p>This module provides the command-line interface (CLI) for Webdown, a tool for converting web pages to clean, readable Markdown format. The CLI allows users to customize various aspects of the conversion process, from content selection to formatting options.</p>"},{"location":"api/cli/#webdown.cli--basic-usage","title":"Basic Usage","text":"<p>The most basic usage is to simply provide a URL:</p> <pre><code>webdown https://example.com\n</code></pre> <p>This will fetch the web page and convert it to Markdown, displaying the result to stdout. To save the output to a file:</p> <pre><code>webdown https://example.com -o output.md\n</code></pre>"},{"location":"api/cli/#webdown.cli--common-options","title":"Common Options","text":"<p>The CLI offers various options to customize the conversion:</p> <ul> <li><code>-o, --output FILE</code>: Write output to FILE instead of stdout</li> <li><code>-t, --toc</code>: Generate a table of contents based on headings</li> <li><code>-L, --no-links</code>: Strip hyperlinks, converting them to plain text</li> <li><code>-I, --no-images</code>: Exclude images from the output</li> <li><code>-s, --css SELECTOR</code>: Extract only content matching the CSS selector (e.g., \"main\")</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar</li> <li><code>-V, --version</code>: Show version information and exit</li> <li><code>-h, --help</code>: Show help message and exit</li> </ul>"},{"location":"api/cli/#webdown.cli--advanced-options","title":"Advanced Options","text":"<p>Advanced formatting options for fine-tuning the Markdown output:</p> <ul> <li><code>--single-line-break</code>: Use single line breaks instead of two line breaks</li> <li><code>--unicode</code>: Use Unicode characters instead of ASCII equivalents</li> <li><code>--tables-as-html</code>: Keep tables as HTML instead of converting to Markdown</li> <li><code>--emphasis-mark CHAR</code>: Character(s) to use for emphasis (default: '_')</li> <li><code>--strong-mark CHARS</code>: Character(s) to use for strong emphasis (default: '**')</li> </ul>"},{"location":"api/cli/#webdown.cli--example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>Basic conversion with a table of contents:    <pre><code>webdown https://example.com -t -o output.md\n</code></pre></p> </li> <li> <p>Extract only the main content area with compact output and text wrapping:    <pre><code>webdown https://example.com -s \"main\" -c -w 80 -o output.md\n</code></pre></p> </li> <li> <p>Create a plain text version (no links or images):    <pre><code>webdown https://example.com -L -I -o text_only.md\n</code></pre></p> </li> <li> <p>Show download progress for large pages and customize Markdown formatting:    <pre><code>webdown https://example.com -p --single-line-break --unicode -o output.md\n</code></pre></p> </li> <li> <p>Extract content from a specific div and customize emphasis markers:    <pre><code>webdown https://example.com -s \"#content\" --emphasis-mark \"*\"      --strong-mark \"__\" -o output.md\n</code></pre></p> </li> </ol> <p>The entry point is the <code>main()</code> function, which is called when the command <code>webdown</code> is executed.</p>"},{"location":"api/cli/#webdown.cli-functions","title":"Functions","text":""},{"location":"api/cli/#webdown.cli.main","title":"<code>main(args: Optional[List[str]] = None) -&gt; int</code>","text":"<p>Execute the webdown command-line interface.</p> <p>This function is the main entry point for the webdown command-line tool. It handles the entire workflow: 1. Parsing command-line arguments 2. Converting the URL to Markdown with the specified options 3. Writing the output to a file or stdout 4. Error handling and reporting</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments as a list of strings. If None, defaults to   sys.argv[1:] (the command-line arguments passed to the script).</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Exit code: 0 for success, 1 for errors</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n0\n&gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n0\n&gt;&gt;&gt; main(['invalid-url'])  # Handle error\n1\n</code></pre> Source code in <code>webdown/cli.py</code> <pre><code>def main(args: Optional[List[str]] = None) -&gt; int:\n    \"\"\"Execute the webdown command-line interface.\n\n    This function is the main entry point for the webdown command-line tool.\n    It handles the entire workflow:\n    1. Parsing command-line arguments\n    2. Converting the URL to Markdown with the specified options\n    3. Writing the output to a file or stdout\n    4. Error handling and reporting\n\n    Args:\n        args: Command line arguments as a list of strings. If None, defaults to\n              sys.argv[1:] (the command-line arguments passed to the script).\n\n    Returns:\n        Exit code: 0 for success, 1 for errors\n\n    Examples:\n        &gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n        0\n        &gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n        0\n        &gt;&gt;&gt; main(['invalid-url'])  # Handle error\n        1\n    \"\"\"\n    try:\n        parsed_args = parse_args(args)\n\n        # If no URL provided, show help\n        if parsed_args.url is None:\n            # This will print help and exit\n            parse_args(\n                [\"-h\"]\n            )  # pragma: no cover - this exits so coverage tools can't track it\n            return 0  # pragma: no cover - unreachable after SystemExit\n\n        # Create a config object from command-line arguments\n        config = WebdownConfig(\n            # Basic options\n            url=parsed_args.url,\n            include_toc=parsed_args.toc,\n            include_links=not parsed_args.no_links,\n            include_images=not parsed_args.no_images,\n            css_selector=parsed_args.css,\n            compact_output=parsed_args.compact,\n            body_width=parsed_args.width,\n            show_progress=parsed_args.progress,\n            # Advanced options\n            single_line_break=parsed_args.single_line_break,\n            unicode_snob=parsed_args.unicode,\n            tables_as_html=parsed_args.tables_as_html,\n            emphasis_mark=parsed_args.emphasis_mark,\n            strong_mark=parsed_args.strong_mark,\n        )\n\n        # Convert using the config object\n        markdown = convert_url_to_markdown(config)\n\n        if parsed_args.output:\n            with open(parsed_args.output, \"w\", encoding=\"utf-8\") as f:\n                f.write(markdown)\n        else:\n            sys.stdout.write(markdown)\n\n        return 0\n\n    except Exception as e:\n        sys.stderr.write(f\"Error: {str(e)}\\n\")\n        return 1\n</code></pre>"},{"location":"api/cli/#webdown.cli.parse_args","title":"<code>parse_args(args: Optional[List[str]] = None) -&gt; argparse.Namespace</code>","text":"<p>Parse command line arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments (defaults to sys.argv[1:] if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Namespace</code> <p>Parsed arguments</p> Source code in <code>webdown/cli.py</code> <pre><code>def parse_args(args: Optional[List[str]] = None) -&gt; argparse.Namespace:\n    \"\"\"Parse command line arguments.\n\n    Args:\n        args: Command line arguments (defaults to sys.argv[1:] if None)\n\n    Returns:\n        Parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Convert web pages to clean, readable Markdown format.\",\n        epilog=\"For more information: https://github.com/kelp/webdown\",\n    )\n\n    # Required argument\n    parser.add_argument(\n        \"url\",\n        help=\"URL of the web page to convert (e.g., https://example.com)\",\n        nargs=\"?\",\n    )\n\n    # Input/Output options\n    io_group = parser.add_argument_group(\"Input/Output Options\")\n    io_group.add_argument(\n        \"-o\",\n        \"--output\",\n        metavar=\"FILE\",\n        help=\"Write Markdown output to FILE instead of stdout\",\n    )\n    io_group.add_argument(\n        \"-p\",\n        \"--progress\",\n        action=\"store_true\",\n        help=\"Display a progress bar during download (useful for large pages)\",\n    )\n\n    # Content options\n    content_group = parser.add_argument_group(\"Content Selection\")\n    content_group.add_argument(\n        \"-s\",\n        \"--css\",\n        metavar=\"SELECTOR\",\n        help=\"Extract content matching CSS selector (e.g., 'main', '.content')\",\n    )\n    content_group.add_argument(\n        \"-L\",\n        \"--no-links\",\n        action=\"store_true\",\n        help=\"Convert hyperlinks to plain text (remove all link markup)\",\n    )\n    content_group.add_argument(\n        \"-I\",\n        \"--no-images\",\n        action=\"store_true\",\n        help=\"Exclude images from the output completely\",\n    )\n\n    # Formatting options\n    format_group = parser.add_argument_group(\"Formatting Options\")\n    format_group.add_argument(\n        \"-t\",\n        \"--toc\",\n        action=\"store_true\",\n        help=\"Generate a table of contents based on headings in the document\",\n    )\n    format_group.add_argument(\n        \"-c\",\n        \"--compact\",\n        action=\"store_true\",\n        help=\"Remove excessive blank lines for more compact output\",\n    )\n    format_group.add_argument(\n        \"-w\",\n        \"--width\",\n        type=int,\n        default=0,\n        metavar=\"N\",\n        help=\"Set line width (0 disables wrapping, 80 recommended for readability)\",\n    )\n\n    # Add advanced HTML2Text options\n    advanced_group = parser.add_argument_group(\"Advanced Options\")\n    advanced_group.add_argument(\n        \"--single-line-break\",\n        action=\"store_true\",\n        help=\"Use single line breaks instead of double (creates more compact output)\",\n    )\n    advanced_group.add_argument(\n        \"--unicode\",\n        action=\"store_true\",\n        help=\"Use Unicode characters instead of ASCII equivalents\",\n    )\n    advanced_group.add_argument(\n        \"--tables-as-html\",\n        action=\"store_true\",\n        help=\"Keep tables as HTML instead of converting to Markdown\",\n    )\n    advanced_group.add_argument(\n        \"--emphasis-mark\",\n        default=\"_\",\n        metavar=\"CHAR\",\n        help=\"Character(s) for emphasis (default: '_', alternative: '*')\",\n    )\n    advanced_group.add_argument(\n        \"--strong-mark\",\n        default=\"**\",\n        metavar=\"CHARS\",\n        help=\"Character(s) for strong emphasis (default: '**', alt: '__')\",\n    )\n\n    # Meta options\n    meta_group = parser.add_argument_group(\"Meta Options\")\n    meta_group.add_argument(\n        \"-V\",\n        \"--version\",\n        action=\"version\",\n        version=f\"%(prog)s {__version__}\",\n        help=\"Show version information and exit\",\n    )\n\n    return parser.parse_args(args)\n</code></pre>"},{"location":"api/converter/","title":"Core API Reference","text":"<p>HTML to Markdown conversion functionality.</p> <p>This module provides functions for fetching web content and converting it to Markdown. Key features include: - URL validation and HTML fetching with proper error handling - HTML to Markdown conversion using html2text - Support for content filtering with CSS selectors - Table of contents generation - Removal of excessive blank lines (compact mode) - Removal of zero-width spaces and other invisible characters</p> <p>The main entry point is the <code>convert_url_to_markdown</code> function, which handles the entire process from fetching a URL to producing clean Markdown output.</p>"},{"location":"api/converter/#main-functions","title":"Main Functions","text":"<p>Convert a web page to markdown.</p> <p>This function accepts either a URL string or a WebdownConfig object. If a URL string is provided, the remaining parameters are used for configuration. If a WebdownConfig object is provided, all other parameters are ignored.</p> <p>Parameters:</p> Name Type Description Default <code>url_or_config</code> <code>Union[str, WebdownConfig]</code> <p>URL of the web page or a WebdownConfig object</p> required <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks (ignored if config provided)</p> <code>True</code> <code>include_images</code> <code>bool</code> <p>Whether to include images (ignored if config provided)</p> <code>True</code> <code>include_toc</code> <code>bool</code> <p>Generate table of contents (ignored if config provided)</p> <code>False</code> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector for extraction (ignored if config provided)</p> <code>None</code> <code>compact_output</code> <code>bool</code> <p>Whether to remove blank lines (ignored if config provided)</p> <code>False</code> <code>body_width</code> <code>int</code> <p>Maximum line length for text wrapping (ignored if config provided)</p> <code>0</code> <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar (ignored if config provided)</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Markdown content</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or cannot be fetched</p> <p>Examples:</p> <p>Convert HTML to Markdown with various formatting options.</p> <p>This function takes HTML content and converts it to Markdown format. It provides many options to customize the output, from basic features like link/image handling to advanced formatting options.</p> <p>You can provide individual parameters or use a WebdownConfig object. If a config object is provided, it takes precedence over individual parameters.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>HTML content to convert as a string</p> required <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks or convert to plain text</p> <code>True</code> <code>include_images</code> <code>bool</code> <p>Whether to include images (True) or exclude them</p> <code>True</code> <code>include_toc</code> <code>bool</code> <p>Whether to generate table of contents based on headings</p> <code>False</code> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content</p> <code>None</code> <code>compact_output</code> <code>bool</code> <p>Whether to remove excessive blank lines in the output</p> <code>False</code> <code>body_width</code> <code>int</code> <p>Maximum line length for text wrapping (0 for no wrapping)</p> <code>0</code> <code>single_line_break</code> <code>bool</code> <p>Whether to use single line breaks instead of double</p> <code>False</code> <code>protect_links</code> <code>bool</code> <p>Whether to protect links from line wrapping</p> <code>False</code> <code>images_as_html</code> <code>bool</code> <p>Whether to keep images as HTML rather than Markdown</p> <code>False</code> <code>unicode_snob</code> <code>bool</code> <p>Whether to use Unicode characters instead of ASCII</p> <code>False</code> <code>tables_as_html</code> <code>bool</code> <p>Whether to keep tables as HTML rather than Markdown</p> <code>False</code> <code>emphasis_mark</code> <code>str</code> <p>Character to use for emphasis (default: \"_\")</p> <code>'_'</code> <code>strong_mark</code> <code>str</code> <p>Character to use for strong emphasis (default: \"**\")</p> <code>'**'</code> <code>default_image_alt</code> <code>str</code> <p>Default alt text for images without alt attributes</p> <code>''</code> <code>pad_tables</code> <code>bool</code> <p>Whether to add padding spaces for table alignment</p> <code>False</code> <code>wrap_list_items</code> <code>bool</code> <p>Whether to wrap list items to the body_width</p> <code>False</code> <code>config</code> <code>Optional[WebdownConfig]</code> <p>A WebdownConfig object with all options. If provided, all other parameters are ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A string containing the converted Markdown content</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n&gt;&gt;&gt; print(html_to_markdown(html))\n# Title\n</code></pre> <p>Content with link</p> <pre><code>&gt;&gt;&gt; print(html_to_markdown(html, include_links=False))\n# Title\n</code></pre> <p>Content with link</p> <pre><code>&gt;&gt;&gt; print(html_to_markdown(html, body_width=40))\n# Title\n</code></pre> <p>Content with link</p> Source code in <code>webdown/converter.py</code> <pre><code>def html_to_markdown(\n    html: str,\n    include_links: bool = True,\n    include_images: bool = True,\n    include_toc: bool = False,\n    css_selector: Optional[str] = None,\n    compact_output: bool = False,\n    body_width: int = 0,\n    # Advanced HTML2Text options\n    single_line_break: bool = False,\n    protect_links: bool = False,\n    images_as_html: bool = False,\n    unicode_snob: bool = False,\n    tables_as_html: bool = False,\n    emphasis_mark: str = \"_\",\n    strong_mark: str = \"**\",\n    default_image_alt: str = \"\",\n    pad_tables: bool = False,\n    wrap_list_items: bool = False,\n    # Config object support\n    config: Optional[WebdownConfig] = None,\n) -&gt; str:\n    \"\"\"Convert HTML to Markdown with various formatting options.\n\n    This function takes HTML content and converts it to Markdown format.\n    It provides many options to customize the output, from basic features like\n    link/image handling to advanced formatting options.\n\n    You can provide individual parameters or use a WebdownConfig object.\n    If a config object is provided, it takes precedence over individual parameters.\n\n    Args:\n        html (str): HTML content to convert as a string\n        include_links (bool): Whether to include hyperlinks or convert to plain text\n        include_images (bool): Whether to include images (True) or exclude them\n        include_toc (bool): Whether to generate table of contents based on headings\n        css_selector (Optional[str]): CSS selector to extract specific content\n        compact_output (bool): Whether to remove excessive blank lines in the output\n        body_width (int): Maximum line length for text wrapping (0 for no wrapping)\n        single_line_break (bool): Whether to use single line breaks instead of double\n        protect_links (bool): Whether to protect links from line wrapping\n        images_as_html (bool): Whether to keep images as HTML rather than Markdown\n        unicode_snob (bool): Whether to use Unicode characters instead of ASCII\n        tables_as_html (bool): Whether to keep tables as HTML rather than Markdown\n        emphasis_mark (str): Character to use for emphasis (default: \"_\")\n        strong_mark (str): Character to use for strong emphasis (default: \"**\")\n        default_image_alt (str): Default alt text for images without alt attributes\n        pad_tables (bool): Whether to add padding spaces for table alignment\n        wrap_list_items (bool): Whether to wrap list items to the body_width\n        config (Optional[WebdownConfig]): A WebdownConfig object with all options.\n            If provided, all other parameters are ignored.\n\n    Returns:\n        A string containing the converted Markdown content\n\n    Examples:\n        &gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n        &gt;&gt;&gt; print(html_to_markdown(html))\n        # Title\n\n        Content with [link](#)\n\n        &gt;&gt;&gt; print(html_to_markdown(html, include_links=False))\n        # Title\n\n        Content with link\n\n        &gt;&gt;&gt; print(html_to_markdown(html, body_width=40))\n        # Title\n\n        Content with [link](#)\n    \"\"\"\n    # Extract specific content by CSS selector if provided\n    if css_selector:\n        soup = BeautifulSoup(html, \"html.parser\")\n        selected = soup.select(css_selector)\n        if selected:\n            html = \"\".join(str(element) for element in selected)\n\n    # Use config object if provided, otherwise use individual parameters\n    if config is not None:\n        # Override parameters with config values\n        include_links = config.include_links\n        include_images = config.include_images\n        include_toc = config.include_toc\n        css_selector = config.css_selector\n        compact_output = config.compact_output\n        body_width = config.body_width\n        single_line_break = config.single_line_break\n        protect_links = config.protect_links\n        images_as_html = config.images_as_html\n        unicode_snob = config.unicode_snob\n        tables_as_html = config.tables_as_html\n        emphasis_mark = config.emphasis_mark\n        strong_mark = config.strong_mark\n        default_image_alt = config.default_image_alt\n        pad_tables = config.pad_tables\n        wrap_list_items = config.wrap_list_items\n\n    # Configure html2text\n    h = html2text.HTML2Text()\n\n    # Basic options\n    h.ignore_links = not include_links\n    h.ignore_images = not include_images\n    h.body_width = body_width  # User-defined line width\n\n    # Advanced options\n    h.single_line_break = single_line_break\n    h.protect_links = protect_links\n    h.images_as_html = images_as_html\n    h.unicode_snob = unicode_snob\n    h.bypass_tables = tables_as_html  # Note: bypass_tables is the opposite of md tables\n    h.emphasis_mark = emphasis_mark\n    h.strong_mark = strong_mark\n    h.default_image_alt = default_image_alt\n    h.pad_tables = pad_tables\n    h.wrap_list_items = wrap_list_items\n\n    markdown = h.handle(html)\n\n    # Post-process the markdown\n    import re\n\n    # Remove zero-width spaces and other invisible characters\n    markdown = re.sub(r\"[\\u200B\\u200C\\u200D\\uFEFF]\", \"\", markdown)\n\n    # Post-process to remove excessive blank lines if requested\n    if compact_output:\n        # Replace 3 or more consecutive newlines with just 2\n        markdown = re.sub(r\"\\n{3,}\", \"\\n\\n\", markdown)\n\n    # Add table of contents if requested\n    if include_toc:\n        headings = re.findall(r\"^(#{1,6})\\s+(.+)$\", markdown, re.MULTILINE)\n\n        if headings:\n            toc = [\"# Table of Contents\\n\"]\n            for markers, title in headings:\n                level = len(markers) - 1  # Adjust for 0-based indentation\n                indent = \"  \" * level\n                link = title.lower().replace(\" \", \"-\")\n                # Clean the link of non-alphanumeric characters\n                link = re.sub(r\"[^\\w-]\", \"\", link)\n                toc.append(f\"{indent}- [{title}](#{link})\")\n\n            markdown = \"\\n\".join(toc) + \"\\n\\n\" + markdown\n\n    # The return type is explicitly str, so we ensure it's returned as a string\n    return str(markdown)\n</code></pre>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-individual-parameters-backward-compatible","title":"Using individual parameters (backward compatible)","text":"<p>markdown = convert_url_to_markdown(     \"https://example.com\",     include_toc=True,     show_progress=True )</p>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-config-object-new-approach","title":"Using config object (new approach)","text":"<p>config = WebdownConfig(     url=\"https://example.com\",     include_toc=True,     show_progress=True ) markdown = convert_url_to_markdown(config)</p> Source code in <code>webdown/converter.py</code> <pre><code>def convert_url_to_markdown(\n    url_or_config: str | WebdownConfig,\n    include_links: bool = True,\n    include_images: bool = True,\n    include_toc: bool = False,\n    css_selector: Optional[str] = None,\n    compact_output: bool = False,\n    body_width: int = 0,\n    show_progress: bool = False,\n) -&gt; str:\n    \"\"\"Convert a web page to markdown.\n\n    This function accepts either a URL string or a WebdownConfig object.\n    If a URL string is provided, the remaining parameters are used for configuration.\n    If a WebdownConfig object is provided, all other parameters are ignored.\n\n    Args:\n        url_or_config (Union[str, WebdownConfig]):\n            URL of the web page or a WebdownConfig object\n\n        include_links (bool):\n            Whether to include hyperlinks (ignored if config provided)\n\n        include_images (bool):\n            Whether to include images (ignored if config provided)\n\n        include_toc (bool):\n            Generate table of contents (ignored if config provided)\n\n        css_selector (Optional[str]):\n            CSS selector for extraction (ignored if config provided)\n\n        compact_output (bool):\n            Whether to remove blank lines (ignored if config provided)\n\n        body_width (int):\n            Maximum line length for text wrapping (ignored if config provided)\n\n        show_progress (bool):\n            Whether to display a progress bar (ignored if config provided)\n\n    Returns:\n        str: Markdown content\n\n    Raises:\n        WebdownError: If URL is invalid or cannot be fetched\n\n    Examples:\n        # Using individual parameters (backward compatible)\n        markdown = convert_url_to_markdown(\n            \"https://example.com\",\n            include_toc=True,\n            show_progress=True\n        )\n\n        # Using config object (new approach)\n        config = WebdownConfig(\n            url=\"https://example.com\",\n            include_toc=True,\n            show_progress=True\n        )\n        markdown = convert_url_to_markdown(config)\n    \"\"\"\n    # Determine if we're using a config object or URL string\n    if isinstance(url_or_config, WebdownConfig):\n        config = url_or_config\n        if config.url is None:\n            raise WebdownError(\"URL must be provided in the config object\")\n        url = config.url\n        include_links = config.include_links\n        include_images = config.include_images\n        include_toc = config.include_toc\n        css_selector = config.css_selector\n        compact_output = config.compact_output\n        body_width = config.body_width\n        show_progress = config.show_progress\n    else:\n        # Using the traditional parameter-based approach\n        url = url_or_config\n\n    html = fetch_url(url, show_progress=show_progress)\n\n    if isinstance(url_or_config, WebdownConfig):\n        # Pass the config object to html_to_markdown\n        return html_to_markdown(html, config=config)\n    else:\n        # Use individual parameters\n        return html_to_markdown(\n            html,\n            include_links=include_links,\n            include_images=include_images,\n            include_toc=include_toc,\n            css_selector=css_selector,\n            compact_output=compact_output,\n            body_width=body_width,\n        )\n</code></pre>"},{"location":"api/converter/#configuration","title":"Configuration","text":"<p>Configuration options for HTML to Markdown conversion.</p> <p>This class centralizes all configuration options for the conversion process, making it easier to manage and extend the functionality.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>Optional[str]</code> <p>URL of the web page to convert</p> <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks (True) or plain text (False)</p> <code>include_images</code> <code>bool</code> <p>Whether to include images (True) or exclude them</p> <code>include_toc</code> <code>bool</code> <p>Whether to generate table of contents</p> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content</p> <code>compact_output</code> <code>bool</code> <p>Whether to remove excessive blank lines</p> <code>body_width</code> <code>int</code> <p>Maximum line length for wrapping (0 for no wrapping)</p> <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> <code>single_line_break</code> <code>bool</code> <p>Whether to use single line breaks (True) or double</p> <code>protect_links</code> <code>bool</code> <p>Whether to protect links from line wrapping</p> <code>images_as_html</code> <code>bool</code> <p>Whether to keep images as HTML rather than Markdown</p> <code>unicode_snob</code> <code>bool</code> <p>Whether to use Unicode characters instead of ASCII</p> <code>tables_as_html</code> <code>bool</code> <p>Whether to keep tables as HTML rather than Markdown</p> <code>emphasis_mark</code> <code>str</code> <p>Character to use for emphasis (usually underscore)</p> <code>strong_mark</code> <code>str</code> <p>Character to use for strong emphasis (usually asterisks)</p> <code>default_image_alt</code> <code>str</code> <p>Default alt text to use when images don't have any</p> <code>pad_tables</code> <code>bool</code> <p>Whether to add padding spaces for table alignment</p> <code>wrap_list_items</code> <code>bool</code> <p>Whether to wrap list items to the body_width</p> Source code in <code>webdown/converter.py</code> <pre><code>@dataclass\nclass WebdownConfig:\n    \"\"\"Configuration options for HTML to Markdown conversion.\n\n    This class centralizes all configuration options for the conversion process,\n    making it easier to manage and extend the functionality.\n\n    Attributes:\n        url (Optional[str]): URL of the web page to convert\n        include_links (bool): Whether to include hyperlinks (True) or plain text (False)\n        include_images (bool): Whether to include images (True) or exclude them\n        include_toc (bool): Whether to generate table of contents\n        css_selector (Optional[str]): CSS selector to extract specific content\n        compact_output (bool): Whether to remove excessive blank lines\n        body_width (int): Maximum line length for wrapping (0 for no wrapping)\n        show_progress (bool): Whether to display a progress bar during download\n        single_line_break (bool): Whether to use single line breaks (True) or double\n        protect_links (bool): Whether to protect links from line wrapping\n        images_as_html (bool): Whether to keep images as HTML rather than Markdown\n        unicode_snob (bool): Whether to use Unicode characters instead of ASCII\n        tables_as_html (bool): Whether to keep tables as HTML rather than Markdown\n        emphasis_mark (str): Character to use for emphasis (usually underscore)\n        strong_mark (str): Character to use for strong emphasis (usually asterisks)\n        default_image_alt (str): Default alt text to use when images don't have any\n        pad_tables (bool): Whether to add padding spaces for table alignment\n        wrap_list_items (bool): Whether to wrap list items to the body_width\n    \"\"\"\n\n    # Basic options\n    url: Optional[str] = None\n    include_links: bool = True\n    include_images: bool = True\n    include_toc: bool = False\n    css_selector: Optional[str] = None\n    compact_output: bool = False\n    body_width: int = 0\n    show_progress: bool = False\n\n    # Advanced HTML2Text options\n    single_line_break: bool = False\n    protect_links: bool = False\n    images_as_html: bool = False\n    unicode_snob: bool = False\n    tables_as_html: bool = False  # Equivalent to bypass_tables in html2text\n    emphasis_mark: str = \"_\"\n    strong_mark: str = \"**\"\n    default_image_alt: str = \"\"\n    pad_tables: bool = False\n    wrap_list_items: bool = False\n</code></pre>"},{"location":"api/converter/#webdown.converter.WebdownConfig-attributes","title":"Attributes","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.body_width","title":"<code>body_width: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.compact_output","title":"<code>compact_output: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.css_selector","title":"<code>css_selector: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.default_image_alt","title":"<code>default_image_alt: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.emphasis_mark","title":"<code>emphasis_mark: str = '_'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.images_as_html","title":"<code>images_as_html: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_images","title":"<code>include_images: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_links","title":"<code>include_links: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_toc","title":"<code>include_toc: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.pad_tables","title":"<code>pad_tables: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.protect_links","title":"<code>protect_links: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.show_progress","title":"<code>show_progress: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.single_line_break","title":"<code>single_line_break: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.strong_mark","title":"<code>strong_mark: str = '**'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.tables_as_html","title":"<code>tables_as_html: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.unicode_snob","title":"<code>unicode_snob: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.url","title":"<code>url: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.wrap_list_items","title":"<code>wrap_list_items: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig-functions","title":"Functions","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.__init__","title":"<code>__init__(url: Optional[str] = None, include_links: bool = True, include_images: bool = True, include_toc: bool = False, css_selector: Optional[str] = None, compact_output: bool = False, body_width: int = 0, show_progress: bool = False, single_line_break: bool = False, protect_links: bool = False, images_as_html: bool = False, unicode_snob: bool = False, tables_as_html: bool = False, emphasis_mark: str = '_', strong_mark: str = '**', default_image_alt: str = '', pad_tables: bool = False, wrap_list_items: bool = False) -&gt; None</code>","text":""},{"location":"api/converter/#error-handling","title":"Error Handling","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for webdown errors.</p> <p>This exception class is used for all errors raised by the webdown package. The error type is indicated by a descriptive message and can be distinguished by checking the message content.</p> Error types include <p>URL format errors: When the URL doesn't follow standard format Network errors: Connection issues, timeouts, HTTP errors Parsing errors: Issues with processing the HTML content</p> Source code in <code>webdown/converter.py</code> <pre><code>class WebdownError(Exception):\n    \"\"\"Exception for webdown errors.\n\n    This exception class is used for all errors raised by the webdown package.\n    The error type is indicated by a descriptive message and can be\n    distinguished by checking the message content.\n\n    Error types include:\n        URL format errors: When the URL doesn't follow standard format\n        Network errors: Connection issues, timeouts, HTTP errors\n        Parsing errors: Issues with processing the HTML content\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/converter/#utility-functions","title":"Utility Functions","text":"<p>Validate URL format.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to validate</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if valid, False otherwise</p> <p>validate_url('https://example.com') True validate_url('not_a_url') False</p> Source code in <code>webdown/converter.py</code> <pre><code>def validate_url(url: str) -&gt; bool:\n    \"\"\"Validate URL format.\n\n    Args:\n        url: URL to validate\n\n    Returns:\n        True if valid, False otherwise\n\n    &gt;&gt;&gt; validate_url('https://example.com')\n    True\n    &gt;&gt;&gt; validate_url('not_a_url')\n    False\n    \"\"\"\n    parsed = urlparse(url)\n    return bool(parsed.scheme and parsed.netloc)\n</code></pre> <p>Fetch HTML content from URL with optional progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to fetch</p> required <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML content as string</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or cannot be fetched</p> Source code in <code>webdown/converter.py</code> <pre><code>def fetch_url(url: str, show_progress: bool = False) -&gt; str:\n    \"\"\"Fetch HTML content from URL with optional progress bar.\n\n    Args:\n        url: URL to fetch\n        show_progress: Whether to display a progress bar during download\n\n    Returns:\n        HTML content as string\n\n    Raises:\n        WebdownError: If URL is invalid or cannot be fetched\n    \"\"\"\n    if not validate_url(url):\n        raise WebdownError(f\"Invalid URL format: {url}\")\n\n    try:\n        # Stream the response to show download progress\n        if show_progress:\n            # First make a HEAD request to get the content length\n            head_response = requests.head(url, timeout=5)\n            head_response.raise_for_status()\n            total_size = int(head_response.headers.get(\"content-length\", 0))\n\n            # Now make the GET request with stream=True\n            response = requests.get(url, timeout=10, stream=True)\n            response.raise_for_status()\n\n            # Create a buffer to store the content\n            content = io.StringIO()\n\n            # Create a progress bar\n            with tqdm(\n                total=total_size,\n                unit=\"B\",\n                unit_scale=True,\n                unit_divisor=1024,\n                desc=f\"Downloading {url.split('/')[-1] or 'webpage'}\",\n                disable=not show_progress,\n            ) as progress_bar:\n                # Decode each chunk and update the progress bar\n                for chunk in response.iter_content(\n                    chunk_size=1024, decode_unicode=True\n                ):\n                    if chunk:\n                        progress_bar.update(len(chunk.encode(\"utf-8\")))\n                        content.write(chunk)\n\n            return content.getvalue()\n        else:\n            # Regular request without progress bar\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            return str(response.text)\n    except requests.exceptions.Timeout:\n        raise WebdownError(f\"Connection timed out while fetching {url}\")\n    except requests.exceptions.ConnectionError:\n        raise WebdownError(f\"Connection error while fetching {url}\")\n    except requests.exceptions.HTTPError as e:\n        raise WebdownError(f\"HTTP error {e.response.status_code} while fetching {url}\")\n    except requests.exceptions.RequestException as e:\n        raise WebdownError(f\"Error fetching {url}: {str(e)}\")\n</code></pre>"}]}