{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webdown","text":"<p>A Python CLI tool for converting web pages to clean, readable Markdown format. Webdown makes it easy to download documentation and feed it into an LLM coding tool.</p>"},{"location":"#why-webdown","title":"Why Webdown?","text":"<ul> <li>Clean Conversion: Produces readable Markdown without formatting artifacts</li> <li>Selective Extraction: Target specific page sections with CSS selectors</li> <li>Claude XML Format: Optimized output format for Anthropic's Claude AI models</li> <li>Progress Tracking: Visual download progress for large pages with <code>-p</code> flag</li> <li>Optimized Handling: Automatic streaming for large pages (&gt;10MB) with no configuration required</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#documentation-for-ai-coding-assistants","title":"Documentation for AI Coding Assistants","text":"<p>Webdown is particularly useful for preparing documentation to use with AI-assisted coding tools like Claude Code, GitHub Copilot, or ChatGPT:</p> <ul> <li>Convert technical documentation into clean Markdown for AI context</li> <li>Extract only the relevant parts of large documentation pages using CSS selectors</li> <li>Strip out images and formatting that might consume token context</li> <li>Generate well-structured tables of contents for better navigation</li> </ul> <pre><code># Example: Convert API docs and store for AI coding context\nwebdown https://api.example.com/docs -s \"main\" -I -c -w 80 -o api_context.md\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install webdown\n</code></pre>"},{"location":"#install-from-source","title":"Install from Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/kelp/webdown.git\ncd webdown\n\n# Install with pip\npip install .\n\n# Or install with Poetry\npoetry install\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Basic usage:</p> <pre><code>webdown https://example.com/page.html -o output.md\n</code></pre> <p>Output to stdout:</p> <pre><code>webdown https://example.com/page.html\n</code></pre>"},{"location":"#options","title":"Options","text":"<ul> <li><code>-o, --output</code>: Output file (default: stdout)</li> <li><code>-t, --toc</code>: Generate table of contents</li> <li><code>-L, --no-links</code>: Strip hyperlinks</li> <li><code>-I, --no-images</code>: Exclude images</li> <li><code>-s, --css SELECTOR</code>: CSS selector to extract specific content</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set the line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar (useful for large files)</li> <li><code>--claude-xml</code>: Output in Claude XML format for use with Claude AI</li> <li><code>--no-metadata</code>: Exclude metadata section from Claude XML output (metadata is included by default)</li> <li><code>--no-date</code>: Exclude current date from metadata in Claude XML output (date is included by default)</li> </ul> <p>For more details on the Claude XML format, see the Anthropic documentation on Claude XML.</p> <p>For large web pages (over 10MB), streaming mode is automatically used to optimize memory usage without any configuration required.</p>"},{"location":"#examples","title":"Examples","text":"<p>Generate markdown with a table of contents:</p> <pre><code>webdown https://example.com -t -o output.md\n</code></pre> <p>Extract only main content:</p> <pre><code>webdown https://example.com -s \"main\" -o output.md\n</code></pre> <p>Strip links and images:</p> <pre><code>webdown https://example.com -L -I -o output.md\n</code></pre> <p>Compact output with progress bar and line wrapping:</p> <pre><code>webdown https://example.com -c -p -w 80 -o output.md\n</code></pre> <p>Generate Claude XML format for use with Claude AI:</p> <pre><code>webdown https://example.com --claude-xml -o doc.xml\n</code></pre> <p>Claude XML with no metadata section:</p> <pre><code>webdown https://example.com --claude-xml --no-metadata -o doc.xml\n</code></pre> <p>Claude XML without the current date in metadata:</p> <pre><code>webdown https://example.com --claude-xml --no-date -o doc.xml\n</code></pre> <p>For complete documentation, use the <code>--help</code> flag:</p> <pre><code>webdown --help\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>API documentation is available online at tcole.net/webdown.</p> <p>You can also generate the documentation locally with:</p> <pre><code>make docs        # Generate HTML docs in the docs/ directory\nmake docs-serve  # Start a local documentation server at http://localhost:8080\n</code></pre>"},{"location":"#development","title":"Development","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ (3.13 recommended)</li> <li>Poetry for dependency management</li> </ul>"},{"location":"#setup","title":"Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/kelp/webdown.git\ncd webdown\n\n# Install dependencies with Poetry\npoetry install\npoetry run pre-commit install\n\n# Optional: Start a Poetry shell for interactive development\npoetry shell\n</code></pre>"},{"location":"#development-commands","title":"Development Commands","text":"<p>We use a Makefile to streamline development tasks:</p> <pre><code># Install dependencies\nmake install\n\n# Run tests\nmake test\n\n# Run tests with coverage\nmake test-coverage\n\n# Run integration tests\nmake integration-test\n\n# Run linting\nmake lint\n\n# Run type checking\nmake type-check\n\n# Format code\nmake format\n\n# Run all pre-commit hooks\nmake pre-commit\n\n# Run all checks (lint, type-check, test)\nmake all-checks\n\n# Build package\nmake build\n\n# Start interactive Poetry shell\nmake shell\n\n# Generate documentation\nmake docs\n\n# Start documentation server\nmake docs-serve\n\n# Publishing to PyPI (maintainers only)\n# See CONTRIBUTING.md for details on the release process\nmake build         # Build package\nmake publish-test  # Publish to TestPyPI (for testing)\n\n# Show all available commands\nmake help\n</code></pre>"},{"location":"#poetry-commands","title":"Poetry Commands","text":"<p>You can also use Poetry directly:</p> <pre><code># Start an interactive shell in the Poetry environment\npoetry shell\n\n# Run a command in the Poetry environment\npoetry run pytest\n\n# Add a new dependency\npoetry add requests\n\n# Add a development dependency\npoetry add --group dev black\n\n# Update dependencies\npoetry update\n\n# Build package\npoetry build\n</code></pre>"},{"location":"#python-api-usage","title":"Python API Usage","text":"<p>Webdown can also be used as a Python library in your own projects:</p> <pre><code>from webdown.converter import convert_url_to_markdown, WebdownConfig\n\n# Basic conversion\nmarkdown = convert_url_to_markdown(\"https://example.com\")\n\n# Using the Config object for more options\nconfig = WebdownConfig(\n    url=\"https://example.com\",\n    include_toc=True,\n    css_selector=\"main\",\n    compact_output=True,\n    body_width=80,\n    show_progress=True\n)\nmarkdown = convert_url_to_markdown(config)\n\n# Save to file\nwith open(\"output.md\", \"w\") as f:\n    f.write(markdown)\n\n# Convert to Claude XML format (optimized for Anthropic's Claude AI)\nfrom webdown.converter import convert_url_to_claude_xml, ClaudeXMLConfig\n\n# Basic Claude XML conversion\nxml = convert_url_to_claude_xml(\"https://example.com\")\n\n# With custom XML configuration\nclaude_config = ClaudeXMLConfig(\n    include_metadata=True,   # Include title, URL, and date (default: True)\n    add_date=True,           # Include current date in metadata (default: True)\n    doc_tag=\"claude_documentation\"  # Root document tag name (default)\n)\nxml = convert_url_to_claude_xml(\"https://example.com\", claude_config)\n\n# Save XML output\nwith open(\"output.xml\", \"w\") as f:\n    f.write(xml)\n\n# For more information on Claude XML format, see:\n# https://docs.anthropic.com/claude/docs/advanced-data-extraction\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Run tests to make sure everything works:    <pre><code># Run standard tests\npoetry run pytest\n\n# Run tests with coverage\npoetry run pytest --cov=webdown\n\n# Run integration tests\npoetry run pytest --integration\n</code></pre></li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol> <p>Please make sure your code passes all tests, type checks, and follows our coding style (enforced by pre-commit hooks). We aim to maintain high code coverage (currently at 93%). When adding features, please include tests.</p> <p>For more details, see our Contributing Guide.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any problems or have feature requests, please open an issue on GitHub.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - see the LICENSE file for details.</p> <p>Documentation Links</p> <p>For full documentation, check out these additional resources: - CLI Reference - Comprehensive command-line interface documentation - CLI Cheat Sheet - Quick reference for common commands - API Reference - Detailed documentation for Python API - Changelog - Version history and changes - Contributing Guide - How to contribute to the project - License - MIT License details</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog_1","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#050-2025-03-21","title":"[0.5.0] - 2025-03-21","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Claude XML format support with <code>--claude-xml</code> flag</li> <li>Optimized XML structure for use with Anthropic's Claude AI models</li> <li>Metadata handling in Claude XML output with <code>--no-metadata</code> and <code>--no-date</code> options</li> <li>New test suite for Claude XML functionality</li> <li>Documentation for Claude XML format</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Simplified streaming implementation with fixed 10MB threshold</li> <li>Removed <code>stream_threshold</code> parameter from WebdownConfig</li> <li>Removed advanced HTML2Text options to simplify the API</li> <li>Improved README documentation for clarity and simplicity</li> <li>Added code quality improvement tasks to TODO.md</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Improved streaming mode detection reliability</li> <li>Better error handling in the streaming implementation</li> </ul>"},{"location":"changelog/#042-2025-03-16","title":"[0.4.2] - 2025-03-16","text":""},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Migrated documentation to MkDocs with Material theme for better API reference</li> <li>Added proper documentation site with auto-generation from docstrings</li> <li>Fixed documentation deployment to GitHub Pages</li> <li>Improved docstrings to be more consistent across modules</li> </ul>"},{"location":"changelog/#041-2025-03-15","title":"[0.4.1] - 2025-03-15","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added pdoc documentation generation with <code>make docs</code> and <code>make docs-serve</code> commands</li> <li>Generated documentation now available in the <code>docs/</code> directory</li> </ul>"},{"location":"changelog/#improved_1","title":"Improved","text":"<ul> <li>Enhanced CLI documentation with detailed explanations and practical examples</li> <li>Improved command-line help with logically organized option groups and better descriptions</li> <li>Added epilog with link to project repository</li> </ul>"},{"location":"changelog/#040-2025-03-15","title":"[0.4.0] - 2025-03-15","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Introduced WebdownConfig class for better parameter organization and configuration</li> <li>Added comprehensive support for advanced HTML2Text options in both CLI and API:</li> <li>Single line break mode (<code>--single-line-break</code>)</li> <li>Unicode character support (<code>--unicode</code>)</li> <li>HTML tables preservation (<code>--tables-as-html</code>)</li> <li>Custom emphasis and strong emphasis markers (<code>--emphasis-mark</code>, <code>--strong-mark</code>)</li> <li>Link protection, image handling options, and more in the API</li> <li>Improved CLI with advanced options group for better help display</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Simplified the exception hierarchy to a single WebdownError class</li> <li>Updated API to support both parameter-based and config-based approaches</li> <li>Improved documentation with detailed examples for new features</li> <li>Updated all dependencies to latest versions</li> <li>html2text updated from 2020.1.16 to 2024.2.26</li> <li>beautifulsoup4, requests, tqdm and all dev dependencies updated to latest versions</li> </ul>"},{"location":"changelog/#031-2025-03-15","title":"[0.3.1] - 2025-03-15","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated all dependencies to latest versions</li> <li>html2text updated from 2020.1.16 to 2024.2.26</li> <li>beautifulsoup4, requests, tqdm and all dev dependencies updated to latest versions</li> </ul>"},{"location":"changelog/#030-2025-03-15","title":"[0.3.0] - 2025-03-15","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Command-line option <code>-w/--width</code> to set html2text body_width for text wrapping</li> <li>Progress bar for downloads with new <code>-p/--progress</code> flag</li> <li>Support for CSS selectors with <code>-s/--css</code> to extract specific page sections</li> <li>Compact output option with <code>-c/--compact</code> to remove excessive blank lines</li> <li>Automatic removal of zero-width spaces and other invisible characters</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Migrated to modern Python packaging using Poetry</li> <li>Updated Python requirements to 3.10+</li> <li>Changed CSS selector flag from <code>-c</code> to <code>-s</code> to avoid conflict with compact flag</li> <li>Improved documentation with comprehensive docstrings</li> <li>Enhanced test coverage to 100% (excluding integration tests)</li> </ul>"},{"location":"changelog/#020-2025-03-12","title":"[0.2.0] - 2025-03-12","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Initial release with basic web to markdown conversion</li> <li>Support for table of contents generation</li> <li>Link and image handling options</li> </ul>"},{"location":"claude-xml-format/","title":"Claude XML Format Support","text":"<p>Webdown includes support for generating Claude XML, a structured format optimized for use with Anthropic's Claude AI models. This format helps Claude better understand and process the content.</p>"},{"location":"claude-xml-format/#benefits-of-claude-xml","title":"Benefits of Claude XML","text":"<ul> <li>Better content organization: Helps Claude understand the structure of your content</li> <li>Improved code handling: Code blocks are properly tagged with language information</li> <li>Metadata support: Includes title, source URL, and date information</li> </ul>"},{"location":"claude-xml-format/#using-claude-xml-format","title":"Using Claude XML Format","text":"<p>To generate Claude XML output, use the <code>--claude-xml</code> flag:</p> <pre><code>webdown https://example.com --claude-xml -o output.xml\n</code></pre>"},{"location":"claude-xml-format/#available-options","title":"Available Options","text":"<ul> <li><code>--claude-xml</code>: Output in Claude XML format instead of Markdown</li> <li><code>--metadata</code>: Include metadata section in XML (default: True)</li> <li><code>--no-metadata</code>: Exclude metadata section from XML</li> </ul>"},{"location":"claude-xml-format/#xml-structure","title":"XML Structure","text":"<p>The Claude XML format used by webdown follows this structure:</p> <pre><code>&lt;claude_documentation&gt;\n  &lt;metadata&gt;\n    &lt;title&gt;Documentation Title&lt;/title&gt;\n    &lt;source&gt;https://source-url.com&lt;/source&gt;\n    &lt;date&gt;2025-03-20&lt;/date&gt;\n  &lt;/metadata&gt;\n\n  &lt;content&gt;\n    &lt;section&gt;\n      &lt;heading&gt;Section Heading&lt;/heading&gt;\n      &lt;text&gt;Regular paragraph text goes here...&lt;/text&gt;\n\n      &lt;code language=\"python\"&gt;\ndef example_function():\n    return \"This is a code example\"\n      &lt;/code&gt;\n    &lt;/section&gt;\n  &lt;/content&gt;\n&lt;/claude_documentation&gt;\n</code></pre>"},{"location":"claude-xml-format/#example-usage","title":"Example Usage","text":"<pre><code># Basic Claude XML conversion\nwebdown https://example.com --claude-xml -o output.xml\n\n# Extract specific content with no metadata\nwebdown https://example.com -s \"main\" --claude-xml --no-metadata -o api_docs.xml\n\n# Compact output with no images\nwebdown https://example.com -I -c --claude-xml -o content.xml\n</code></pre>"},{"location":"claude-xml-format/#python-api-usage","title":"Python API Usage","text":"<pre><code>from webdown.converter import convert_url_to_claude_xml\n\n# Basic usage\nxml = convert_url_to_claude_xml(\"https://example.com\")\n\n# Save to file\nwith open(\"output.xml\", \"w\") as f:\n    f.write(xml)\n</code></pre>"},{"location":"cli-cheatsheet/","title":"CLI Cheat Sheet","text":"<p>Quick reference guide for the Webdown command-line interface.</p>"},{"location":"cli-cheatsheet/#basic-commands","title":"Basic Commands","text":"<pre><code># Basic conversion\nwebdown https://example.com\n\n# Save to file\nwebdown https://example.com -o output.md\n\n# Generate table of contents\nwebdown https://example.com -t\n\n# Show progress bar\nwebdown https://example.com -p\n\n# Extract specific content\nwebdown https://example.com -s \"main\"\n\n# Plain text version (no links/images)\nwebdown https://example.com -L -I\n\n# Compact output with width of 80 chars\nwebdown https://example.com -c -w 80\n</code></pre>"},{"location":"cli-cheatsheet/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Single line breaks (more compact)\nwebdown https://example.com --single-line-break\n\n# Unicode support\nwebdown https://example.com --unicode\n\n# Custom emphasis markers\nwebdown https://example.com --emphasis-mark \"*\" --strong-mark \"__\"\n\n# Keep tables as HTML\nwebdown https://example.com --tables-as-html\n\n# Streaming mode for large documents (5MB threshold)\nwebdown https://example.com --stream-threshold 5242880\n\n# Protect links from wrapping\nwebdown https://example.com --protect-links\n\n# Images as HTML\nwebdown https://example.com --images-as-html\n\n# Default alt text for images\nwebdown https://example.com --default-image-alt \"image\"\n\n# Add padding to tables\nwebdown https://example.com --pad-tables\n\n# Wrap list items\nwebdown https://example.com --wrap-list-items\n</code></pre>"},{"location":"cli-cheatsheet/#complete-example","title":"Complete Example","text":"<pre><code># Extract main content, add TOC, compact output, 80 char width,\n# show progress, use Unicode, and single line breaks\nwebdown https://example.com -s \"main\" -t -c -w 80 -p \\\n  --unicode --single-line-break -o output.md\n</code></pre>"},{"location":"cli-cheatsheet/#options-reference","title":"Options Reference","text":"Category Option Description Output <code>-o FILE</code> Write to file <code>-p</code> Show progress bar Content <code>-s SELECTOR</code> CSS selector for content <code>-L</code> Remove links <code>-I</code> Remove images Format <code>-t</code> Add table of contents <code>-c</code> Compact output <code>-w N</code> Set line width <code>--stream-threshold N</code> Size threshold for streaming Advanced <code>--single-line-break</code> Use single line breaks <code>--unicode</code> Use Unicode characters <code>--protect-links</code> Prevent link wrapping <code>--images-as-html</code> Keep images as HTML <code>--tables-as-html</code> Keep tables as HTML <code>--emphasis-mark CHAR</code> Custom emphasis marker <code>--strong-mark CHARS</code> Custom strong emphasis marker <code>--default-image-alt TEXT</code> Default alt text <code>--pad-tables</code> Add padding for tables <code>--wrap-list-items</code> Wrap list items Meta <code>-V</code> Show version <code>-h</code> Show help"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>Webdown offers a straightforward command-line interface for converting web pages to Markdown or Claude XML format.</p>"},{"location":"cli-reference/#basic-usage","title":"Basic Usage","text":"<pre><code>webdown URL [options]\n</code></pre> <p>Where <code>URL</code> is the web page you want to convert (e.g., <code>https://example.com</code>).</p>"},{"location":"cli-reference/#complete-options-reference","title":"Complete Options Reference","text":""},{"location":"cli-reference/#inputoutput-options","title":"Input/Output Options","text":"Option Description <code>-o FILE, --output FILE</code> Write Markdown output to FILE instead of stdout <code>-p, --progress</code> Display a progress bar during download (useful for large pages)"},{"location":"cli-reference/#content-selection","title":"Content Selection","text":"Option Description <code>-s SELECTOR, --css SELECTOR</code> Extract content matching CSS selector (e.g., 'main', '.content') <code>-L, --no-links</code> Convert hyperlinks to plain text (remove all link markup) <code>-I, --no-images</code> Exclude images from the output completely"},{"location":"cli-reference/#formatting-options","title":"Formatting Options","text":"Option Description <code>-t, --toc</code> Generate a table of contents based on headings in the document <code>-c, --compact</code> Remove excessive blank lines for more compact output <code>-w N, --width N</code> Set line width (0 disables wrapping, 80 recommended for readability)"},{"location":"cli-reference/#claude-xml-options","title":"Claude XML Options","text":"Option Description <code>--claude-xml</code> Output in Claude XML format instead of Markdown <code>--metadata</code> Include metadata section in XML (default) <code>--no-metadata</code> Exclude metadata section from XML"},{"location":"cli-reference/#meta-options","title":"Meta Options","text":"Option Description <code>-V, --version</code> Show version information and exit <code>-h, --help</code> Show help message and exit"},{"location":"cli-reference/#examples-with-explanations","title":"Examples with Explanations","text":""},{"location":"cli-reference/#basic-conversion","title":"Basic Conversion","text":"<p><pre><code>webdown https://example.com\n</code></pre> Converts the web page at example.com to Markdown and outputs to the terminal.</p>"},{"location":"cli-reference/#save-to-file","title":"Save to File","text":"<p><pre><code>webdown https://example.com -o example.md\n</code></pre> Converts the web page and saves the output to example.md.</p>"},{"location":"cli-reference/#generate-table-of-contents","title":"Generate Table of Contents","text":"<p><pre><code>webdown https://example.com -t\n</code></pre> Adds a table of contents based on the headings found in the document.</p>"},{"location":"cli-reference/#extract-main-content","title":"Extract Main Content","text":"<p><pre><code>webdown https://example.com -s \"main\"\n</code></pre> Extracts only the content inside the <code>&lt;main&gt;</code> tag, ignoring headers, footers, sidebars, etc.</p>"},{"location":"cli-reference/#plain-text-no-links-or-images","title":"Plain Text (No Links or Images)","text":"<p><pre><code>webdown https://example.com -L -I\n</code></pre> Creates a plain text version by removing hyperlinks and images.</p>"},{"location":"cli-reference/#compact-output-with-custom-width","title":"Compact Output with Custom Width","text":"<p><pre><code>webdown https://example.com -c -w 80\n</code></pre> Removes excessive blank lines and wraps text at 80 characters.</p>"},{"location":"cli-reference/#show-progress-for-large-pages","title":"Show Progress for Large Pages","text":"<p><pre><code>webdown https://example.com -p\n</code></pre> Displays a progress bar during download, useful for large pages.</p>"},{"location":"cli-reference/#claude-xml-format","title":"Claude XML Format","text":"<p><pre><code>webdown https://example.com --claude-xml -o output.xml\n</code></pre> Outputs the page content in Claude XML format, optimized for use with Anthropic's Claude AI.</p>"},{"location":"cli-reference/#complete-example-with-multiple-options","title":"Complete Example with Multiple Options","text":"<p><pre><code>webdown https://example.com -s \"main\" -t -c -w 80 -p -o example.md\n</code></pre> This example: - Extracts content from the <code>&lt;main&gt;</code> tag - Generates a table of contents - Removes excessive blank lines - Wraps text at 80 characters - Shows a progress bar during download - Saves output to example.md</p>"},{"location":"cli-reference/#cli-cheat-sheet","title":"CLI Cheat Sheet","text":"Task Command Basic conversion <code>webdown https://example.com</code> Save to file <code>webdown https://example.com -o file.md</code> Add table of contents <code>webdown https://example.com -t</code> Extract main content <code>webdown https://example.com -s \"main\"</code> Plain text version <code>webdown https://example.com -L -I</code> Compact output <code>webdown https://example.com -c</code> Set text width <code>webdown https://example.com -w 80</code> Show progress <code>webdown https://example.com -p</code> Claude XML format <code>webdown https://example.com --claude-xml</code>"},{"location":"contributing/","title":"Contributing Guide","text":""},{"location":"contributing/#contributing-to-webdown","title":"Contributing to Webdown","text":"<p>Thank you for your interest in contributing to Webdown! This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Poetry for dependency management</li> <li>Git</li> </ul>"},{"location":"contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/kelp/webdown.git\ncd webdown\n</code></pre></p> </li> <li> <p>Install dependencies using Poetry:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Install pre-commit hooks:    <pre><code>poetry run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-commands","title":"Development Commands","text":"<p>We use a Makefile to simplify common development tasks:</p> <ul> <li>Install dependencies: <code>make install</code></li> <li>Install for local development: <code>make install-dev</code></li> <li>Run tests: <code>make test</code></li> <li>Run tests with coverage: <code>make test-coverage</code></li> <li>Run integration tests: <code>make integration-test</code></li> <li>Run linting: <code>make lint</code></li> <li>Run type checking: <code>make type-check</code></li> <li>Format code: <code>make format</code></li> <li>Run all checks: <code>make all-checks</code></li> </ul> <p>You can also use Poetry directly: <pre><code>poetry run pytest\npoetry run mypy webdown\npoetry run flake8 webdown\npoetry run black webdown\n</code></pre></p>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<p>This project follows PEP 8 conventions with some modifications enforced by Black and flake8:</p> <ul> <li>Use 4 spaces for indentation (enforced by Black)</li> <li>Line length is limited to 88 characters (enforced by Black)</li> <li>Follow naming conventions:</li> <li>Classes: <code>CamelCase</code></li> <li>Functions and variables: <code>snake_case</code></li> <li>Constants: <code>UPPER_CASE</code></li> </ul>"},{"location":"contributing/#type-hinting","title":"Type Hinting","text":"<p>All code should use Python type hints:</p> <pre><code>def function(parameter: str, optional_param: Optional[int] = None) -&gt; bool:\n    \"\"\"Function documentation.\"\"\"\n    ...\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>All modules, classes, and functions should have docstrings.</li> <li>Use the Google docstring format:</li> </ul> <pre><code>def function(param1: str, param2: int) -&gt; bool:\n    \"\"\"Short description of function.\n\n    Longer description explaining details if needed.\n\n    Args:\n        param1: Description of param1\n        param2: Description of param2\n\n    Returns:\n        Description of return value\n\n    Raises:\n        ExceptionType: When and why this exception is raised\n    \"\"\"\n</code></pre>"},{"location":"contributing/#updating-documentation","title":"Updating Documentation","text":"<p>After making changes to the codebase, especially when adding new features or modifying existing ones:</p> <ol> <li>Update the docstrings in the code with implementation details</li> <li>Update the README.md with any new command-line options or examples</li> <li>Update CHANGELOG.md with user-facing changes</li> </ol> <p>The CLI argument parser in <code>webdown/cli.py</code> is the source of truth for command-line options, and the README.md is the main user documentation.</p>"},{"location":"contributing/#error-handling","title":"Error Handling","text":"<ul> <li>Use custom exception classes defined in <code>converter.py</code></li> <li>Provide meaningful error messages</li> <li>Document all possible exceptions in docstrings</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Write tests for all new functionality</li> <li>Tests should be placed in the <code>webdown/tests</code> directory</li> <li>Follow test class naming: <code>TestClassName</code></li> <li>Follow test method naming: <code>test_functionality_being_tested</code></li> <li>Use fixtures where appropriate to reduce code duplication</li> </ul>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<ul> <li>Run all tests: <code>make test</code></li> <li>Run with coverage: <code>make test-coverage</code></li> <li>Run integration tests: <code>make integration-test</code></li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a feature branch</li> <li>Implement your changes, following the coding standards</li> <li>Ensure all tests pass, including new tests for your feature</li> <li>Update documentation if needed</li> <li>Submit a pull request with a clear description of the changes</li> <li>Address any feedback in code reviews</li> </ol>"},{"location":"contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for functionality added in a backward-compatible manner</li> <li>PATCH version for backward-compatible bug fixes</li> </ul>"},{"location":"contributing/#publishing-to-pypi-maintainers-only","title":"Publishing to PyPI (Maintainers Only)","text":"<p>Webdown uses GitHub Actions to automate the release process:</p> <ol> <li>Update version number in:</li> <li><code>pyproject.toml</code></li> <li><code>webdown/__init__.py</code></li> <li>Update <code>CHANGELOG.md</code> with the new version and changes</li> <li>Commit the version bump changes</li> <li>Run the release target to verify everything and create the tag:    <pre><code>make release\n</code></pre></li> <li>If the release target succeeds, push the tag to trigger the release:    <pre><code>git push origin v0.4.x\n</code></pre></li> <li>The GitHub Actions workflow will:</li> <li>Verify the version numbers match</li> <li>Run tests</li> <li>Build the package</li> <li>Create a GitHub release with content from CHANGELOG.md</li> <li>Publish to PyPI automatically</li> </ol> <p>For local testing before a release, you can use: - <code>make build</code> to build the package locally - <code>make publish-test</code> to publish to TestPyPI</p> <p>Note: PyPI publishing uses GitHub's OIDC and PyPI's Trusted Publishers feature for secure authentication without tokens.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the project's MIT License (see LICENSE file).</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have any questions or need help, please open an issue or contact the maintainers directly.</p> <p>Thank you for your contributions!</p>"},{"location":"api/","title":"API Reference","text":"<p>Webdown provides a simple API for converting web pages to Markdown. The main modules are:</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li>Converter - Core functionality for HTML to Markdown conversion</li> <li>CLI - Command-line interface for the package</li> </ul>"},{"location":"api/#quick-start","title":"Quick Start","text":"<pre><code>from webdown.converter import convert_url_to_markdown\n\n# Basic usage\nmarkdown = convert_url_to_markdown(\"https://example.com\")\n\n# With options\nmarkdown = convert_url_to_markdown(\n    url=\"https://example.com\",\n    include_toc=True,\n    compact_output=True,\n    body_width=80\n)\n\n# Save to file\nwith open(\"output.md\", \"w\") as f:\n    f.write(markdown)\n</code></pre> <p>For more details, see the Converter API documentation.</p>"},{"location":"api/cli/","title":"Command-Line Interface","text":"<p>Command-line interface for webdown.</p> <p>This module provides the command-line interface (CLI) for Webdown, a tool for converting web pages to clean, readable Markdown format. The CLI allows users to customize various aspects of the conversion process, from content selection to formatting options.</p> <p>For a complete reference, see the CLI Reference documentation.</p>"},{"location":"api/cli/#webdown.cli--basic-usage","title":"Basic Usage","text":"<p>The most basic usage is to simply provide a URL:</p> <pre><code>webdown https://example.com\n</code></pre> <p>This will fetch the web page and convert it to Markdown, displaying the result to stdout. To save the output to a file:</p> <pre><code>webdown https://example.com -o output.md\n</code></pre>"},{"location":"api/cli/#webdown.cli--common-options","title":"Common Options","text":"<p>The CLI offers various options to customize the conversion:</p> <ul> <li><code>-o, --output FILE</code>: Write output to FILE instead of stdout</li> <li><code>-t, --toc</code>: Generate a table of contents based on headings</li> <li><code>-L, --no-links</code>: Strip hyperlinks, converting them to plain text</li> <li><code>-I, --no-images</code>: Exclude images from the output</li> <li><code>-s, --css SELECTOR</code>: Extract only content matching the CSS selector (e.g., \"main\")</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar</li> <li><code>-V, --version</code>: Show version information and exit</li> <li><code>-h, --help</code>: Show help message and exit</li> </ul> <p>Note: For large web pages (over 10MB), webdown automatically uses streaming mode to optimize memory usage.</p>"},{"location":"api/cli/#webdown.cli--claude-xml-options","title":"Claude XML Options","text":"<p>Options for generating Claude XML format, optimized for use with Claude AI:</p> <ul> <li><code>--claude-xml</code>: Output in Claude XML format instead of Markdown</li> <li><code>--metadata</code>: Include metadata section in XML (default: True)</li> <li><code>--no-metadata</code>: Exclude metadata section from XML</li> <li><code>--no-date</code>: Don't include current date in metadata</li> </ul>"},{"location":"api/cli/#webdown.cli--example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>Basic conversion with a table of contents:    <pre><code>webdown https://example.com -t -o output.md\n</code></pre></p> </li> <li> <p>Extract only the main content area with compact output and text wrapping:    <pre><code>webdown https://example.com -s \"main\" -c -w 80 -o output.md\n</code></pre></p> </li> <li> <p>Create a plain text version (no links or images):    <pre><code>webdown https://example.com -L -I -o text_only.md\n</code></pre></p> </li> <li> <p>Show download progress for large pages:    <pre><code>webdown https://example.com -p -o output.md\n</code></pre></p> </li> <li> <p>Extract content from a specific div:    <pre><code>webdown https://example.com -s \"#content\" -o output.md\n</code></pre></p> </li> <li> <p>Process a large webpage with progress bar (streaming is automatic for large pages):    <pre><code>webdown https://example.com -p\n</code></pre></p> </li> <li> <p>Generate output in Claude XML format for use with Claude AI:    <pre><code>webdown https://example.com -s \"main\" --claude-xml -o output.xml\n</code></pre></p> </li> <li> <p>Create Claude XML without metadata:    <pre><code>webdown https://example.com --claude-xml --no-metadata -o output.xml\n</code></pre></p> </li> <li> <p>Complete example with multiple options:    <pre><code>webdown https://example.com -s \"main\" -t -c -w 80 -p -o output.md\n</code></pre></p> </li> </ol> <p>The entry point is the <code>main()</code> function, which is called when the command <code>webdown</code> is executed.</p>"},{"location":"api/cli/#functions-reference","title":"Functions Reference","text":"<p>Command-line interface for webdown.</p> <p>This module provides the command-line interface (CLI) for Webdown, a tool for converting web pages to clean, readable Markdown format. The CLI allows users to customize various aspects of the conversion process, from content selection to formatting options.</p> <p>For a complete reference, see the CLI Reference documentation.</p>"},{"location":"api/cli/#webdown.cli--basic-usage","title":"Basic Usage","text":"<p>The most basic usage is to simply provide a URL:</p> <pre><code>webdown https://example.com\n</code></pre> <p>This will fetch the web page and convert it to Markdown, displaying the result to stdout. To save the output to a file:</p> <pre><code>webdown https://example.com -o output.md\n</code></pre>"},{"location":"api/cli/#webdown.cli--common-options","title":"Common Options","text":"<p>The CLI offers various options to customize the conversion:</p> <ul> <li><code>-o, --output FILE</code>: Write output to FILE instead of stdout</li> <li><code>-t, --toc</code>: Generate a table of contents based on headings</li> <li><code>-L, --no-links</code>: Strip hyperlinks, converting them to plain text</li> <li><code>-I, --no-images</code>: Exclude images from the output</li> <li><code>-s, --css SELECTOR</code>: Extract only content matching the CSS selector (e.g., \"main\")</li> <li><code>-c, --compact</code>: Remove excessive blank lines from the output</li> <li><code>-w, --width N</code>: Set line width for wrapped text (0 for no wrapping)</li> <li><code>-p, --progress</code>: Show download progress bar</li> <li><code>-V, --version</code>: Show version information and exit</li> <li><code>-h, --help</code>: Show help message and exit</li> </ul> <p>Note: For large web pages (over 10MB), webdown automatically uses streaming mode to optimize memory usage.</p>"},{"location":"api/cli/#webdown.cli--claude-xml-options","title":"Claude XML Options","text":"<p>Options for generating Claude XML format, optimized for use with Claude AI:</p> <ul> <li><code>--claude-xml</code>: Output in Claude XML format instead of Markdown</li> <li><code>--metadata</code>: Include metadata section in XML (default: True)</li> <li><code>--no-metadata</code>: Exclude metadata section from XML</li> <li><code>--no-date</code>: Don't include current date in metadata</li> </ul>"},{"location":"api/cli/#webdown.cli--example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>Basic conversion with a table of contents:    <pre><code>webdown https://example.com -t -o output.md\n</code></pre></p> </li> <li> <p>Extract only the main content area with compact output and text wrapping:    <pre><code>webdown https://example.com -s \"main\" -c -w 80 -o output.md\n</code></pre></p> </li> <li> <p>Create a plain text version (no links or images):    <pre><code>webdown https://example.com -L -I -o text_only.md\n</code></pre></p> </li> <li> <p>Show download progress for large pages:    <pre><code>webdown https://example.com -p -o output.md\n</code></pre></p> </li> <li> <p>Extract content from a specific div:    <pre><code>webdown https://example.com -s \"#content\" -o output.md\n</code></pre></p> </li> <li> <p>Process a large webpage with progress bar (streaming is automatic for large pages):    <pre><code>webdown https://example.com -p\n</code></pre></p> </li> <li> <p>Generate output in Claude XML format for use with Claude AI:    <pre><code>webdown https://example.com -s \"main\" --claude-xml -o output.xml\n</code></pre></p> </li> <li> <p>Create Claude XML without metadata:    <pre><code>webdown https://example.com --claude-xml --no-metadata -o output.xml\n</code></pre></p> </li> <li> <p>Complete example with multiple options:    <pre><code>webdown https://example.com -s \"main\" -t -c -w 80 -p -o output.md\n</code></pre></p> </li> </ol> <p>The entry point is the <code>main()</code> function, which is called when the command <code>webdown</code> is executed.</p>"},{"location":"api/cli/#webdown.cli-functions","title":"Functions","text":""},{"location":"api/cli/#webdown.cli.main","title":"<code>main(args: Optional[List[str]] = None) -&gt; int</code>","text":"<p>Execute the webdown command-line interface.</p> <p>This function is the main entry point for the webdown command-line tool. It handles the entire workflow: 1. Parsing command-line arguments 2. Converting the URL to Markdown with the specified options 3. Writing the output to a file or stdout 4. Error handling and reporting</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments as a list of strings. If None, defaults to   sys.argv[1:] (the command-line arguments passed to the script).</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Exit code: 0 for success, 1 for errors</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n0\n&gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n0\n&gt;&gt;&gt; main(['invalid-url'])  # Handle error\n1\n</code></pre> Source code in <code>webdown/cli.py</code> <pre><code>def main(args: Optional[List[str]] = None) -&gt; int:\n    \"\"\"Execute the webdown command-line interface.\n\n    This function is the main entry point for the webdown command-line tool.\n    It handles the entire workflow:\n    1. Parsing command-line arguments\n    2. Converting the URL to Markdown with the specified options\n    3. Writing the output to a file or stdout\n    4. Error handling and reporting\n\n    Args:\n        args: Command line arguments as a list of strings. If None, defaults to\n              sys.argv[1:] (the command-line arguments passed to the script).\n\n    Returns:\n        Exit code: 0 for success, 1 for errors\n\n    Examples:\n        &gt;&gt;&gt; main(['https://example.com'])  # Convert and print to stdout\n        0\n        &gt;&gt;&gt; main(['https://example.com', '-o', 'output.md'])  # Write to file\n        0\n        &gt;&gt;&gt; main(['invalid-url'])  # Handle error\n        1\n    \"\"\"\n    try:\n        parsed_args = parse_args(args)\n\n        # If no URL provided, show help\n        if parsed_args.url is None:\n            # This will print help and exit\n            parse_args([\"-h\"])  # pragma: no cover\n            return 0  # pragma: no cover - unreachable after SystemExit\n\n        # Process the URL with proper configuration\n        config = _create_webdown_config(parsed_args)\n        output = _convert_content(parsed_args, config)\n        _write_output(output, parsed_args.output)\n\n        return 0\n\n    except Exception as e:\n        return _handle_error(e)\n</code></pre>"},{"location":"api/cli/#webdown.cli.parse_args","title":"<code>parse_args(args: Optional[List[str]] = None) -&gt; argparse.Namespace</code>","text":"<p>Parse command line arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Command line arguments (defaults to sys.argv[1:] if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Namespace</code> <p>Parsed arguments</p> Source code in <code>webdown/cli.py</code> <pre><code>def parse_args(args: Optional[List[str]] = None) -&gt; argparse.Namespace:\n    \"\"\"Parse command line arguments.\n\n    Args:\n        args: Command line arguments (defaults to sys.argv[1:] if None)\n\n    Returns:\n        Parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Convert web pages to clean, readable Markdown format.\",\n        epilog=\"For more information: https://github.com/kelp/webdown\",\n    )\n\n    # Add all argument groups\n    _add_basic_arguments(parser)\n    _add_io_arguments(parser)\n    _add_content_arguments(parser)\n    _add_formatting_arguments(parser)\n    _add_claude_xml_arguments(parser)\n    _add_meta_arguments(parser)\n\n    return parser.parse_args(args)\n</code></pre>"},{"location":"api/converter/","title":"Core API Reference","text":"<p>HTML to Markdown and Claude XML conversion functionality.</p> <p>This module handles fetching web content and converting it to Markdown or Claude XML. Key features include: - URL validation and HTML fetching with proper error handling - HTML to Markdown conversion using html2text - Support for content filtering with CSS selectors - Table of contents generation - Removal of excessive blank lines (compact mode) - Removal of zero-width spaces and other invisible characters - Claude XML output format for AI context optimization</p> <p>The main entry points are <code>convert_url_to_markdown</code> and <code>convert_url_to_claude_xml</code>, which handle the entire process from fetching a URL to producing clean output.</p>"},{"location":"api/converter/#main-functions","title":"Main Functions","text":"<p>Convert a web page to markdown.</p> <p>This function accepts either a URL string or a WebdownConfig object. If a URL string is provided, it will be used to create a WebdownConfig object.</p> <p>For large web pages (over 10MB), streaming mode is automatically used.</p> <p>Parameters:</p> Name Type Description Default <code>url_or_config</code> <code>str | WebdownConfig</code> <p>URL of the web page or a WebdownConfig object</p> required <p>Returns:</p> Type Description <code>str</code> <p>Markdown content</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or cannot be fetched</p> <p>Examples:</p> <p>Convert HTML to Markdown with formatting options.</p> <p>This function takes HTML content and converts it to Markdown format based on the provided configuration object.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>HTML content to convert</p> required <code>config</code> <code>WebdownConfig</code> <p>Configuration options for the conversion</p> required <p>Returns:</p> Type Description <code>str</code> <p>Converted Markdown content</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n&gt;&gt;&gt; config = WebdownConfig()\n&gt;&gt;&gt; print(html_to_markdown(html, config))\n# Title\n</code></pre> <p>Content with link</p> <pre><code>&gt;&gt;&gt; config = WebdownConfig(include_links=False)\n&gt;&gt;&gt; print(html_to_markdown(html, config))\n# Title\n</code></pre> <p>Content with link</p> Source code in <code>webdown/converter.py</code> <pre><code>def html_to_markdown(\n    html: str,\n    config: WebdownConfig,\n) -&gt; str:\n    \"\"\"Convert HTML to Markdown with formatting options.\n\n    This function takes HTML content and converts it to Markdown format\n    based on the provided configuration object.\n\n    Args:\n        html: HTML content to convert\n        config: Configuration options for the conversion\n\n    Returns:\n        Converted Markdown content\n\n    Examples:\n        &gt;&gt;&gt; html = \"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content with &lt;a href='#'&gt;link&lt;/a&gt;&lt;/p&gt;\"\n        &gt;&gt;&gt; config = WebdownConfig()\n        &gt;&gt;&gt; print(html_to_markdown(html, config))\n        # Title\n\n        Content with [link](#)\n\n        &gt;&gt;&gt; config = WebdownConfig(include_links=False)\n        &gt;&gt;&gt; print(html_to_markdown(html, config))\n        # Title\n\n        Content with link\n    \"\"\"\n    # Validate all configuration parameters\n    _validate_config(config)\n\n    # Extract specific content by CSS selector if provided\n    if config.css_selector:\n        html = extract_content_with_css(html, config.css_selector)\n\n    # Configure and run html2text\n    converter = _configure_html2text(config)\n    markdown = converter.handle(html)\n\n    # Clean up the markdown\n    markdown = clean_markdown(markdown, config.compact_output)\n\n    # Add table of contents if requested\n    if config.include_toc:\n        markdown = generate_table_of_contents(markdown)\n\n    return str(markdown)\n</code></pre>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-url-string","title":"Using URL string","text":"<p>markdown = convert_url_to_markdown(\"https://example.com\")</p>"},{"location":"api/converter/#webdown.converter.convert_url_to_markdown--using-config-object","title":"Using config object","text":"<p>config = WebdownConfig(     url=\"https://example.com\",     include_toc=True,     show_progress=True ) markdown = convert_url_to_markdown(config)</p> Source code in <code>webdown/converter.py</code> <pre><code>def convert_url_to_markdown(url_or_config: str | WebdownConfig) -&gt; str:\n    \"\"\"Convert a web page to markdown.\n\n    This function accepts either a URL string or a WebdownConfig object.\n    If a URL string is provided, it will be used to create a WebdownConfig object.\n\n    For large web pages (over 10MB), streaming mode is automatically used.\n\n    Args:\n        url_or_config: URL of the web page or a WebdownConfig object\n\n    Returns:\n        Markdown content\n\n    Raises:\n        WebdownError: If URL is invalid or cannot be fetched\n\n    Examples:\n        # Using URL string\n        markdown = convert_url_to_markdown(\"https://example.com\")\n\n        # Using config object\n        config = WebdownConfig(\n            url=\"https://example.com\",\n            include_toc=True,\n            show_progress=True\n        )\n        markdown = convert_url_to_markdown(config)\n    \"\"\"\n    # Get normalized config with validated URL\n    config = _get_normalized_config(url_or_config)\n    # At this point, the URL has been validated and cannot be None\n    url = config.url\n    assert url is not None\n\n    try:\n        # Check if streaming is needed based on content size\n        # This is mainly for compatibility with tests that expect this behavior\n        _check_streaming_needed(url)\n\n        # Fetch the HTML content (URL already validated by _get_normalized_config)\n        html = fetch_url(url, show_progress=config.show_progress)\n\n        # Convert HTML to Markdown\n        return html_to_markdown(html, config)\n\n    except requests.exceptions.RequestException as e:\n        # This is a fallback for any other request exceptions\n        raise WebdownError(f\"Error fetching {url}: {str(e)}\")\n</code></pre>"},{"location":"api/converter/#configuration","title":"Configuration","text":"<p>Configuration options for HTML to Markdown conversion.</p> <p>This class centralizes all configuration options for the conversion process, focusing on the most useful options for LLM documentation processing.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>Optional[str]</code> <p>URL of the web page to convert</p> <code>include_links</code> <code>bool</code> <p>Whether to include hyperlinks (True) or plain text (False)</p> <code>include_images</code> <code>bool</code> <p>Whether to include images (True) or exclude them</p> <code>include_toc</code> <code>bool</code> <p>Whether to generate table of contents</p> <code>css_selector</code> <code>Optional[str]</code> <p>CSS selector to extract specific content</p> <code>compact_output</code> <code>bool</code> <p>Whether to remove excessive blank lines</p> <code>body_width</code> <code>int</code> <p>Maximum line length for wrapping (0 for no wrapping)</p> <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> Source code in <code>webdown/converter.py</code> <pre><code>@dataclass\nclass WebdownConfig:\n    \"\"\"Configuration options for HTML to Markdown conversion.\n\n    This class centralizes all configuration options for the conversion process,\n    focusing on the most useful options for LLM documentation processing.\n\n    Attributes:\n        url (Optional[str]): URL of the web page to convert\n        include_links (bool): Whether to include hyperlinks (True) or plain text (False)\n        include_images (bool): Whether to include images (True) or exclude them\n        include_toc (bool): Whether to generate table of contents\n        css_selector (Optional[str]): CSS selector to extract specific content\n        compact_output (bool): Whether to remove excessive blank lines\n        body_width (int): Maximum line length for wrapping (0 for no wrapping)\n        show_progress (bool): Whether to display a progress bar during download\n    \"\"\"\n\n    # Core options\n    url: Optional[str] = None\n    include_links: bool = True\n    include_images: bool = True\n    include_toc: bool = False\n    css_selector: Optional[str] = None\n    compact_output: bool = False\n    body_width: int = 0\n    show_progress: bool = False\n</code></pre>"},{"location":"api/converter/#webdown.converter.WebdownConfig-attributes","title":"Attributes","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.body_width","title":"<code>body_width: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.compact_output","title":"<code>compact_output: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.css_selector","title":"<code>css_selector: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_images","title":"<code>include_images: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_links","title":"<code>include_links: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.include_toc","title":"<code>include_toc: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.show_progress","title":"<code>show_progress: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.url","title":"<code>url: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig-functions","title":"Functions","text":""},{"location":"api/converter/#webdown.converter.WebdownConfig.__init__","title":"<code>__init__(url: Optional[str] = None, include_links: bool = True, include_images: bool = True, include_toc: bool = False, css_selector: Optional[str] = None, compact_output: bool = False, body_width: int = 0, show_progress: bool = False) -&gt; None</code>","text":""},{"location":"api/converter/#error-handling","title":"Error Handling","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for webdown errors.</p> <p>This exception class is used for all errors raised by the webdown package. The error type is indicated by a descriptive message and can be distinguished by checking the message content.</p> Error types include <p>URL format errors: When the URL doesn't follow standard format Network errors: Connection issues, timeouts, HTTP errors Parsing errors: Issues with processing the HTML content</p> Source code in <code>webdown/converter.py</code> <pre><code>class WebdownError(Exception):\n    \"\"\"Exception for webdown errors.\n\n    This exception class is used for all errors raised by the webdown package.\n    The error type is indicated by a descriptive message and can be\n    distinguished by checking the message content.\n\n    Error types include:\n        URL format errors: When the URL doesn't follow standard format\n        Network errors: Connection issues, timeouts, HTTP errors\n        Parsing errors: Issues with processing the HTML content\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api/converter/#utility-functions","title":"Utility Functions","text":"<p>Validate URL format.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to validate</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if valid, False otherwise</p> <p>validate_url('https://example.com') True validate_url('http://example.com') True validate_url('not_a_url') False</p> Source code in <code>webdown/converter.py</code> <pre><code>def validate_url(url: str) -&gt; bool:\n    \"\"\"Validate URL format.\n\n    Args:\n        url: URL to validate\n\n    Returns:\n        True if valid, False otherwise\n\n    &gt;&gt;&gt; validate_url('https://example.com')\n    True\n    &gt;&gt;&gt; validate_url('http://example.com')\n    True\n    &gt;&gt;&gt; validate_url('not_a_url')\n    False\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n\n    if not url.strip():\n        return False\n\n    parsed = urlparse(url)\n\n    # Check for required components\n    has_scheme = bool(parsed.scheme)\n    has_netloc = bool(parsed.netloc)\n\n    return has_scheme and has_netloc\n</code></pre> <p>Fetch HTML content from URL with optional progress bar.</p> <p>This is a simplified wrapper around fetch_url_with_progress with default parameters.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to fetch</p> required <code>show_progress</code> <code>bool</code> <p>Whether to display a progress bar during download</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>HTML content as string</p> <p>Raises:</p> Type Description <code>WebdownError</code> <p>If URL is invalid or content cannot be fetched</p> Source code in <code>webdown/converter.py</code> <pre><code>def fetch_url(url: str, show_progress: bool = False) -&gt; str:\n    \"\"\"Fetch HTML content from URL with optional progress bar.\n\n    This is a simplified wrapper around fetch_url_with_progress with default parameters.\n\n    Args:\n        url: URL to fetch\n        show_progress: Whether to display a progress bar during download\n\n    Returns:\n        HTML content as string\n\n    Raises:\n        WebdownError: If URL is invalid or content cannot be fetched\n    \"\"\"\n    # Validate URL for backward compatibility with tests\n    # In normal usage, URL is already validated by _get_normalized_config\n    if not validate_url(url):\n        raise WebdownError(f\"Invalid URL format: {url}\")\n\n    return fetch_url_with_progress(url, show_progress, chunk_size=1024, timeout=10)\n</code></pre>"}]}